### proc_creation_lnx_awk_shell_spawn.yaral ###
rule suspicious_invocation_of_shell_via_awk_-_linux {
    meta:
        description = "Detects the execution of \"awk\" or it's sibling commands, to invoke a shell using the system() function.
This behavior is commonly associated with attempts to execute arbitrary commands or escalate privileges, potentially leading to unauthorized access or further exploitation.
"
        references = "https://gtfobins.github.io/gtfobins/awk/#shell, https://gtfobins.github.io/gtfobins/gawk/#shell, https://gtfobins.github.io/gtfobins/nawk/#shell, https://gtfobins.github.io/gtfobins/mawk/#shell"
        mitre = "attack.execution, attack.t1059"
        logsource = "process_creation"
        product = "linux"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\/awk|\/gawk|\/mawk|\/nawk/ nocase and
        $event.target.process.command_line = /BEGIN \{system/ nocase and
        $event.target.process.command_line = /\/bin\/bash|\/bin\/dash|\/bin\/fish|\/bin\/sh|\/bin\/zsh/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_lnx_dd_file_overwrite.yaral ###
rule dd_file_overwrite {
    meta:
        description = "Detects potential overwriting and deletion of a file using DD."
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md#atomic-test-2---macoslinux---overwrite-file-with-dd"
        mitre = "attack.impact, attack.t1485"
        logsource = "process_creation"
        product = "linux"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = //bin/dd|/usr/bin/dd/ nocase and
        $event.target.process.command_line = /of=/ nocase and
        $event.target.process.command_line = /if=\/dev\/zero|if=\/dev\/null/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_lnx_security_software_discovery.yaral ###
rule security_software_discovery_-_linux {
    meta:
        description = "Detects usage of system utilities (only grep and egrep for now) to discover security software discovery"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1518.001/T1518.001.md"
        mitre = "attack.discovery, attack.t1518.001"
        logsource = "process_creation"
        product = "linux"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\/grep|\/egrep/ nocase and
        $event.target.process.command_line = /nessusd|td-agent|packetbeat|filebeat|auditbeat|osqueryd|cbagentd|falcond/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_lnx_susp_find_execution.yaral ###
rule potential_discovery_activity_using_find_-_linux {
    meta:
        description = "Detects usage of \"find\" binary in a suspicious manner to perform discovery"
        references = "https://github.com/SaiSathvik1/Linux-Privilege-Escalation-Notes"
        mitre = "attack.discovery, attack.t1083"
        logsource = "process_creation"
        product = "linux"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\/find$/ nocase and
        $event.target.process.command_line = /-perm -4000|-perm -2000|-perm 0777|-perm -222|-perm -o w|-perm -o x|-perm -u=s|-perm -g=s/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_bcdedit_boot_conf_tamper.yaral ###
rule boot_configuration_tampering_via_bcdedit.exe {
    meta:
        description = "Detects the use of the bcdedit command to tamper with the boot configuration data. This technique is often times used by malware or attackers as a destructive way before launching ransomware."
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md, https://eqllib.readthedocs.io/en/latest/analytics/c4732632-9c1d-4980-9fa8-1d98c93f918e.html"
        mitre = "attack.impact, attack.t1490"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\bcdedit\.exe$/ nocase or
        $event.target.process.file.names = "bcdedit.exe" nocase) and
        $event.target.process.command_line = /set/ nocase and
        (($event.target.process.command_line = /bootstatuspolicy/ nocase and
        $event.target.process.command_line = /ignoreallfailures/ nocase) or
        ($event.target.process.command_line = /recoveryenabled/ nocase and
        $event.target.process.command_line = /no/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_bitsadmin_download_file_sharing_domains.yaral ###
rule suspicious_download_from_file-sharing_website_via_bitsadmin {
    meta:
        description = "Detects usage of bitsadmin downloading a file from a suspicious domain"
        references = "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin, https://isc.sans.edu/diary/22264, https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/, https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker, https://www.cisa.gov/uscert/ncas/alerts/aa22-321a, https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
        mitre = "attack.defense-evasion, attack.persistence, attack.t1197, attack.s0190, attack.t1036.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\bitsadmin\.exe$/ nocase or
        $event.target.process.file.names = "bitsadmin.exe" nocase) and
        $event.target.process.command_line = / \/transfer | \/create | \/addfile / nocase and
        $event.target.process.command_line = /\.githubusercontent\.com|anonfiles\.com|cdn\.discordapp\.com|ddns\.net|dl\.dropboxusercontent\.com|ghostbin\.co|glitch\.me|gofile\.io|hastebin\.com|mediafire\.com|mega\.nz|onrender\.com|pages\.dev|paste\.ee|pastebin\.com|pastebin\.pl|pastetext\.net|privatlab\.com|privatlab\.net|send\.exploit\.in|sendspace\.com|storage\.googleapis\.com|storjshare\.io|supabase\.co|temp\.sh|transfer\.sh|trycloudflare\.com|ufile\.io|w3spaces\.com|workers\.dev/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_calc_uncommon_exec.yaral ###
rule suspicious_calculator_usage {
    meta:
        description = "Detects suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion.
"
        references = "https://twitter.com/ItsReallyNick/status/1094080242686312448"
        mitre = "attack.defense-evasion, attack.t1036"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /\\calc\.exe / nocase or
        ($event.target.process.file.full_path = /\\calc\.exe$/ nocase and
        ($event.target.process.file.full_path != /:\\Windows\\System32\\/ nocase and
        $event.target.process.file.full_path != /:\\Windows\\SysWOW64\\/ nocase and
        $event.target.process.file.full_path != /:\\Windows\\WinSxS\\/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_certutil_encode.yaral ###
rule file_encoded_to_base64_via_certutil.exe {
    meta:
        description = "Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration"
        references = "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil, https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/, https://lolbas-project.github.io/lolbas/Binaries/Certutil/"
        mitre = "attack.defense-evasion, attack.t1027"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\certutil\.exe$/ nocase or
        $event.target.process.file.names = "CertUtil.exe" nocase) and
        $event.target.process.command_line = /-encode/ nocase or
        $event.target.process.command_line = /\/encode/ nocase or
        $event.target.process.command_line = /–encode/ nocase or
        $event.target.process.command_line = /—encode/ nocase or
        $event.target.process.command_line = /―encode/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_certutil_encode_susp_location.yaral ###
rule file_in_suspicious_location_encoded_to_base64_via_certutil.exe {
    meta:
        description = "Detects the execution of certutil with the \"encode\" flag to encode a file to base64 where the files are located in potentially suspicious locations"
        references = "https://www.virustotal.com/gui/file/35c22725a92d5cb1016b09421c0a6cdbfd860fd4778b3313669b057d4a131cb7/behavior, https://www.virustotal.com/gui/file/427616528b7dbc4a6057ac89eb174a3a90f7abcf3f34e5a359b7a910d82f7a72/behavior, https://www.virustotal.com/gui/file/34de4c8beded481a4084a1fd77855c3e977e8ac643e5c5842d0f15f7f9b9086f/behavior, https://www.virustotal.com/gui/file/4abe1395a09fda06d897a9c4eb247278c1b6cddda5d126ce5b3f4f499e3b8fa2/behavior"
        mitre = "attack.defense-evasion, attack.t1027"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\certutil\.exe$/ nocase or
        $event.target.process.file.names = "CertUtil.exe" nocase) and
        $event.target.process.command_line = /-encode/ nocase or
        $event.target.process.command_line = /\/encode/ nocase or
        $event.target.process.command_line = /–encode/ nocase or
        $event.target.process.command_line = /—encode/ nocase or
        $event.target.process.command_line = /―encode/ nocase and
        $event.target.process.command_line = /\\AppData\\Roaming\\|\\Desktop\\|\\Local\\Temp\\|\\PerfLogs\\|\\Users\\Public\\|\\Windows\\Temp\\|\$Recycle\.Bin/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cipher_overwrite_deleted_data.yaral ###
rule deleted_data_overwritten_via_cipher.exe {
    meta:
        description = "Detects usage of the \"cipher\" built-in utility in order to overwrite deleted data from disk.
Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources.
Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1485/T1485.md#atomic-test-3---overwrite-deleted-data-on-c-drive"
        mitre = "attack.impact, attack.t1485"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "CIPHER.EXE" nocase or
        $event.target.process.file.full_path = /\\cipher\.exe$/ nocase) and
        $event.target.process.command_line = / \/w:/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cmd_assoc_execution.yaral ###
rule change_default_file_association_via_assoc {
    meta:
        description = "Detects file association changes using the builtin \"assoc\" command.
When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.001/T1546.001.md"
        mitre = "attack.persistence, attack.t1546.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\cmd\.exe$/ nocase or
        $event.target.process.file.names = "Cmd.Exe" nocase) and
        $event.target.process.command_line = /assoc/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cmd_del_execution.yaral ###
rule file_deletion_via_del {
    meta:
        description = "Detects execution of the builtin \"del\"/\"erase\" commands in order to delete files.
Adversaries may delete files left behind by the actions of their intrusion activity.
Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.
Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md, https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase"
        mitre = "attack.defense-evasion, attack.t1070.004"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\cmd\.exe$/ nocase or
        $event.target.process.file.names = "Cmd.Exe" nocase) and
        $event.target.process.command_line = /del |erase / nocase and
        ($event.target.process.command_line = / -f/ nocase or
        $event.target.process.command_line = / \/f/ nocase or
        $event.target.process.command_line = / –f/ nocase or
        $event.target.process.command_line = / —f/ nocase or
        $event.target.process.command_line = / ―f/ nocase or
        $event.target.process.command_line = / -s/ nocase or
        $event.target.process.command_line = / \/s/ nocase or
        $event.target.process.command_line = / –s/ nocase or
        $event.target.process.command_line = / —s/ nocase or
        $event.target.process.command_line = / ―s/ nocase or
        $event.target.process.command_line = / -q/ nocase or
        $event.target.process.command_line = / \/q/ nocase or
        $event.target.process.command_line = / –q/ nocase or
        $event.target.process.command_line = / —q/ nocase or
        $event.target.process.command_line = / ―q/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cmd_dir_execution.yaral ###
rule file_and_subfolder_enumeration_via_dir_command {
    meta:
        description = "Detects usage of the \"dir\" command part of Widows CMD with the \"/S\" command line flag in order to enumerate files in a specified directory and all subdirectories.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md"
        mitre = "attack.discovery, attack.t1217"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\cmd\.exe$/ nocase or
        $event.target.process.file.names = "Cmd.Exe" nocase) and
        $event.target.process.command_line = dir.*-s nocase or
        $event.target.process.command_line = dir.*\/s nocase or
        $event.target.process.command_line = dir.*–s nocase or
        $event.target.process.command_line = dir.*—s nocase or
        $event.target.process.command_line = dir.*―s nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cmd_redirection_susp_folder.yaral ###
rule potentially_suspicious_cmd_shell_output_redirect {
    meta:
        description = "Detects inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location.
This technique is sometimes used by malicious actors in order to redirect the output of reconnaissance commands such as \"hostname\" and \"dir\" to files for future exfiltration.
"
        references = "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
        mitre = "attack.defense-evasion, attack.t1218"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\cmd\.exe$/ nocase or
        $event.target.process.file.names = "Cmd.Exe" nocase) and
        ($event.target.process.command_line = />.%APPDATA%\\|>.%TEMP%\\|>.%TMP%\\|>.%USERPROFILE%\\|>.C:\\ProgramData\\|>.C:\\Temp\\|>.C:\\Users\\Public\\|>.C:\\Windows\\Temp\\/ nocase or
        ($event.target.process.command_line = / >|">|'>/ nocase and
        $event.target.process.command_line = /C:\\Users\\/ nocase and
        $event.target.process.command_line = /\\AppData\\Local\\/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cmd_rmdir_execution.yaral ###
rule directory_removal_via_rmdir {
    meta:
        description = "Detects execution of the builtin \"rmdir\" command in order to delete directories.
Adversaries may delete files left behind by the actions of their intrusion activity.
Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how.
Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.004/T1070.004.md, https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/erase"
        mitre = "attack.defense-evasion, attack.t1070.004"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\cmd\.exe$/ nocase or
        $event.target.process.file.names = "Cmd.Exe" nocase) and
        $event.target.process.command_line = /rmdir/ nocase and
        $event.target.process.command_line = /\/s|\/q/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cmd_shadowcopy_access.yaral ###
rule copy_from_volumeshadowcopy_via_cmd.exe {
    meta:
        description = "Detects the execution of the builtin \"copy\" command that targets a shadow copy (sometimes used to copy registry hives that are in use)"
        references = "https://twitter.com/vxunderground/status/1423336151860002816?s=20, https://www.virustotal.com/gui/file/03e9b8c2e86d6db450e5eceec057d7e369ee2389b9daecaf06331a95410aa5f8/detection, https://pentestlab.blog/2018/07/04/dumping-domain-password-hashes/"
        mitre = "attack.impact, attack.t1490"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /copy / nocase and
        $event.target.process.command_line = /\\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cmd_stdin_redirect.yaral ###
rule read_contents_from_stdin_via_cmd.exe {
    meta:
        description = "Detect the use of \"<\" to read and potentially execute a file via cmd.exe"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1059.003/T1059.003.md, https://web.archive.org/web/20220306121156/https://www.x86matthew.com/view_post?id=ntdll_pipe"
        mitre = "attack.execution, attack.t1059.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "Cmd.Exe" nocase or
        $event.target.process.file.full_path = /\\cmd\.exe$/ nocase) and
        $event.target.process.command_line = /</ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cmd_sticky_keys_replace.yaral ###
rule persistence_via_sticky_key_backdoor {
    meta:
        description = "By replacing the sticky keys executable with the local admins CMD executable, an attacker is able to access a privileged windows console session without authenticating to the system.
When the sticky keys are \"activated\" the privilleged shell is launched.
"
        references = "https://www.fireeye.com/blog/threat-research/2017/03/apt29_domain_frontin.html, https://www.clearskysec.com/wp-content/uploads/2020/02/ClearSky-Fox-Kitten-Campaign-v1.pdf, https://learn.microsoft.com/en-us/archive/blogs/jonathantrull/detecting-sticky-key-backdoors"
        mitre = "attack.t1546.008, attack.privilege-escalation"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /copy / nocase and
        $event.target.process.command_line = /\/y / nocase and
        $event.target.process.command_line = /C:\\windows\\system32\\cmd\.exe C:\\windows\\system32\\sethc\.exe/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_cmdkey_recon.yaral ###
rule potential_reconnaissance_for_cached_credentials_via_cmdkey.exe {
    meta:
        description = "Detects usage of cmdkey to look for cached credentials on the system"
        references = "https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation, https://technet.microsoft.com/en-us/library/cc754243(v=ws.11).aspx, https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey"
        mitre = "attack.credential-access, attack.t1003.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\cmdkey\.exe$/ nocase or
        $event.target.process.file.names = "cmdkey.exe" nocase) and
        $event.target.process.command_line = / -l/ nocase or
        $event.target.process.command_line = / \/l/ nocase or
        $event.target.process.command_line = / –l/ nocase or
        $event.target.process.command_line = / —l/ nocase or
        $event.target.process.command_line = / ―l/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_diskshadow_script_mode.yaral ###
rule diskshadow_script_mode_execution {
    meta:
        description = "Detects execution of \"Diskshadow.exe\" in script mode using the \"/s\" flag. Attackers often abuse \"diskshadow\" to execute scripts that deleted the shadow copies on the systems. Investigate the content of the scripts and its location.
"
        references = "https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/, https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration, https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4, https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow"
        mitre = "attack.defense-evasion, attack.t1218, attack.execution, detection.threat-hunting"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "diskshadow.exe" nocase or
        $event.target.process.file.full_path = /\\diskshadow\.exe$/ nocase) and
        $event.target.process.command_line = /-s / nocase or
        $event.target.process.command_line = /\/s / nocase or
        $event.target.process.command_line = /–s / nocase or
        $event.target.process.command_line = /—s / nocase or
        $event.target.process.command_line = /―s / nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_findstr_lsass.yaral ###
rule lsass_process_reconnaissance_via_findstr.exe {
    meta:
        description = "Detects findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID"
        references = "https://blog.talosintelligence.com/2022/08/recent-cyber-attack.html?m=1"
        mitre = "attack.credential-access, attack.t1552.006"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.file.full_path = /\\find\.exe|\\findstr\.exe/ nocase or
        $event.target.process.file.names = /FIND.EXE|FINDSTR.EXE/ nocase) and
        $event.target.process.command_line = /lsass/ nocase) or
        ($event.target.process.command_line = / -i "lsass/ nocase or
        $event.target.process.command_line = / \/i "lsass/ nocase or
        $event.target.process.command_line = / –i "lsass/ nocase or
        $event.target.process.command_line = / —i "lsass/ nocase or
        $event.target.process.command_line = / ―i "lsass/ nocase or
        $event.target.process.command_line = / -i lsass\.exe/ nocase or
        $event.target.process.command_line = / \/i lsass\.exe/ nocase or
        $event.target.process.command_line = / –i lsass\.exe/ nocase or
        $event.target.process.command_line = / —i lsass\.exe/ nocase or
        $event.target.process.command_line = / ―i lsass\.exe/ nocase or
        $event.target.process.command_line = /findstr "lsass/ nocase or
        $event.target.process.command_line = /findstr lsass/ nocase or
        $event.target.process.command_line = /findstr\.exe "lsass/ nocase or
        $event.target.process.command_line = /findstr\.exe lsass/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_findstr_password_recon.yaral ###
rule potential_password_reconnaissance_via_findstr.exe {
    meta:
        description = "Detects command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages"
        references = "https://steflan-security.com/windows-privilege-escalation-credential-harvesting/, https://adsecurity.org/?p=2288"
        mitre = "attack.credential-access, attack.t1552.001, detection.threat-hunting"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\findstr\.exe$/ nocase or
        $event.target.process.file.names = "FINDSTR.EXE" nocase) and
        $event.target.process.command_line = /contraseña|hasło|heslo|parola|passe|passw|senha|senord|密碼/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_findstr_recon_pipe_output.yaral ###
rule recon_command_output_piped_to_findstr.exe {
    meta:
        description = "Detects the execution of a potential recon command where the results are piped to \"findstr\". This is meant to trigger on inline calls of \"cmd.exe\" via the \"/c\" or \"/k\" for example.
Attackers often time use this technique to extract specific information they require in their reconnaissance phase.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/02cb591f75064ffe1e0df9ac3ed5972a2e491c97/atomics/T1057/T1057.md#atomic-test-6---discover-specific-process---tasklist, https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf, https://www.trendmicro.com/en_us/research/22/d/spring4shell-exploited-to-deploy-cryptocurrency-miners.html"
        mitre = "attack.discovery, attack.t1057"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /ipconfig.*\|.*find|net.*\|.*find|netstat.*\|.*find|ping.*\|.*find|systeminfo.*\|.*find|tasklist.*\|.*find|whoami.*\|.*find/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_findstr_sysmon_discovery_via_default_altitude.yaral ###
rule sysmon_discovery_via_default_driver_altitude_using_findstr.exe {
    meta:
        description = "Detects usage of \"findstr\" with the argument \"385201\". Which could indicate potential discovery of an installed Sysinternals Sysmon service using the default driver altitude (even if the name is changed)."
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1518.001/T1518.001.md#atomic-test-5---security-software-discovery---sysmon-service"
        mitre = "attack.discovery, attack.t1518.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\find\.exe|\\findstr\.exe/ nocase or
        $event.target.process.file.names = /FIND.EXE|FINDSTR.EXE/ nocase) and
        $event.target.process.command_line = / 385201/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_finger_execution.yaral ###
rule finger.exe_execution {
    meta:
        description = "Detects execution of the \"finger.exe\" utility.
Finger.EXE or \"TCPIP Finger Command\" is an old utility that is still present on modern Windows installation. It Displays information about users on a specified remote computer (typically a UNIX computer) that is running the finger service or daemon.
Due to the old nature of this utility and the rareness of machines having the finger service. Any execution of \"finger.exe\" can be considered \"suspicious\" and worth investigating.
"
        references = "https://twitter.com/bigmacjpg/status/1349727699863011328?s=12, https://app.any.run/tasks/40115012-a919-4208-bfed-41e82cb3dadf/, http://hyp3rlinx.altervista.org/advisories/Windows_TCPIP_Finger_Command_C2_Channel_and_Bypassing_Security_Software.txt"
        mitre = "attack.command-and-control, attack.t1105"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "finger.exe" nocase or
        $event.target.process.file.full_path = /\\finger\.exe$/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_fltmc_unload_driver.yaral ###
rule filter_driver_unloaded_via_fltmc.exe {
    meta:
        description = "Detect filter driver unloading activity via fltmc.exe"
        references = "https://www.darkoperator.com/blog/2018/10/5/operating-offensively-against-sysmon, https://www.cybereason.com/blog/threat-analysis-report-lockbit-2.0-all-paths-lead-to-ransom"
        mitre = "attack.defense-evasion, attack.t1070, attack.t1562, attack.t1562.002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\fltMC\.exe$/ nocase or
        $event.target.process.file.names = "fltMC.exe" nocase) and
        $event.target.process.command_line = /unload/ nocase and
        (($event.principal.process.file.full_path = /^C:\\Users\\/ nocase and
        $event.principal.process.file.full_path = /\\AppData\\Local\\Temp\\/ nocase and
        $event.principal.process.file.full_path = /\\endpoint-protection-installer-x64\.tmp$/ nocase and
        $event.target.process.command_line = /unload rtp_filesystem_filter$/ nocase) or
        ($event.principal.process.file.full_path = "C:\\Program Files (x86)\\ManageEngine\\uems_agent\\bin\\dcfaservice64.exe" nocase and
        $event.target.process.command_line = /unload DFMFilter$/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_fltmc_unload_driver_sysmon.yaral ###
rule sysmon_driver_unloaded_via_fltmc.exe {
    meta:
        description = "Detects possible Sysmon filter driver unloaded via fltmc.exe"
        references = "https://www.darkoperator.com/blog/2018/10/5/operating-offensively-against-sysmon"
        mitre = "attack.defense-evasion, attack.t1070, attack.t1562, attack.t1562.002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\fltMC\.exe$/ nocase or
        $event.target.process.file.names = "fltMC.exe" nocase) and
        $event.target.process.command_line = /unload/ nocase and
        $event.target.process.command_line = /sysmon/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_forfiles_proxy_execution_.yaral ###
rule forfiles_command_execution {
    meta:
        description = "Detects the execution of \"forfiles\" with the \"/c\" flag.
While this is an expected behavior of the tool, it can be abused in order to proxy execution through it with any binary.
Can be used to bypass application whitelisting.
"
        references = "https://lolbas-project.github.io/lolbas/Binaries/Forfiles/, https://pentestlab.blog/2020/07/06/indirect-command-execution/"
        mitre = "attack.execution, attack.t1059"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\forfiles\.exe$/ nocase or
        $event.target.process.file.names = "forfiles.exe" nocase) and
        $event.target.process.command_line = / -c / nocase or
        $event.target.process.command_line = / \/c / nocase or
        $event.target.process.command_line = / –c / nocase or
        $event.target.process.command_line = / —c / nocase or
        $event.target.process.command_line = / ―c / nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_fsutil_symlinkevaluation.yaral ###
rule fsutil_behavior_set_symlinkevaluation {
    meta:
        description = "A symbolic link is a type of file that contains a reference to another file.
This is probably done to make sure that the ransomware is able to follow shortcuts on the machine in order to find the original file to encrypt
"
        references = "https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware, https://learn.microsoft.com/fr-fr/windows-server/administration/windows-commands/fsutil-behavior"
        mitre = "attack.execution, attack.t1059"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\fsutil\.exe$/ nocase or
        $event.target.process.file.names = "fsutil.exe" nocase) and
        $event.target.process.command_line = /behavior / nocase and
        $event.target.process.command_line = /set / nocase and
        $event.target.process.command_line = /SymlinkEvaluation/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_fsutil_usage.yaral ###
rule fsutil_suspicious_invocation {
    meta:
        description = "Detects suspicious parameters of fsutil (deleting USN journal, configuring it with small size, etc).
Might be used by ransomwares during the attack (seen by NotPetya and others).
"
        references = "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070/T1070.md, https://eqllib.readthedocs.io/en/latest/analytics/c91f422a-5214-4b17-8664-c5fcf115c0a2.html, https://github.com/albertzsigovits/malware-notes/blob/558898932c1579ff589290092a2c8febefc3a4c9/Ransomware/Lockbit.md, https://blog.cluster25.duskrise.com/2023/05/22/back-in-black-blackbyte-nt"
        mitre = "attack.defense-evasion, attack.impact, attack.t1070, attack.t1485"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\fsutil\.exe$/ nocase or
        $event.target.process.file.names = "fsutil.exe" nocase) and
        $event.target.process.command_line = /deletejournal|createjournal|setZeroData/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_gup_download.yaral ###
rule file_download_using_notepad++_gup_utility {
    meta:
        description = "Detects execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files."
        references = "https://twitter.com/nas_bench/status/1535322182863179776"
        mitre = "attack.command-and-control, attack.t1105"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\GUP\.exe$/ nocase or
        $event.target.process.file.names = "gup.exe" nocase) and
        $event.target.process.command_line = / -unzipTo / nocase and
        $event.target.process.command_line = /http/ nocase and
        $event.principal.process.file.full_path != /\\notepad\+\+\.exe$/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_hh_chm_execution.yaral ###
rule hh.exe_execution {
    meta:
        description = "Detects the execution of \"hh.exe\" to open \".chm\" files."
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.001/T1218.001.md, https://eqllib.readthedocs.io/en/latest/analytics/b25aa548-7937-11e9-8f5c-d46d6d62a49e.html, https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37"
        mitre = "attack.defense-evasion, attack.t1218.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "HH.exe" nocase or
        $event.target.process.file.full_path = /\\hh\.exe$/ nocase) and
        $event.target.process.command_line = /\.chm/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_hh_chm_remote_download_or_execution.yaral ###
rule remote_chm_file_download/execution_via_hh.exe {
    meta:
        description = "Detects the usage of \"hh.exe\" to execute/download remotely hosted \".chm\" files."
        references = "https://www.splunk.com/en_us/blog/security/follina-for-protocol-handlers.html, https://github.com/redcanaryco/atomic-red-team/blob/1cf4dd51f83dcb0ebe6ade902d6157ad2dbc6ac8/atomics/T1218.001/T1218.001.md, https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37"
        mitre = "attack.defense-evasion, attack.t1218.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "HH.exe" nocase or
        $event.target.process.file.full_path = /\\hh\.exe$/ nocase) and
        $event.target.process.command_line = /http:\/\/|https:\/\/|\\\\/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_hh_susp_execution.yaral ###
rule suspicious_hh.exe_execution {
    meta:
        description = "Detects a suspicious execution of a Microsoft HTML Help (HH.exe)"
        references = "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/, https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7, https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/, https://www.zscaler.com/blogs/security-research/unintentional-leak-glimpse-attack-vectors-apt37"
        mitre = "attack.defense-evasion, attack.execution, attack.initial-access, attack.t1047, attack.t1059.001, attack.t1059.003, attack.t1059.005, attack.t1059.007, attack.t1218, attack.t1218.001, attack.t1218.010, attack.t1218.011, attack.t1566, attack.t1566.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "HH.exe" nocase or
        $event.target.process.file.full_path = /\\hh\.exe$/ nocase) and
        $event.target.process.command_line = /\.application|\\AppData\\Local\\Temp\\|\\Content\.Outlook\\|\\Downloads\\|\\Users\\Public\\|\\Windows\\Temp\\/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_hktl_crackmapexec_execution_patterns.yaral ###
rule hacktool_-_crackmapexec_execution_patterns {
    meta:
        description = "Detects various execution patterns of the CrackMapExec pentesting framework"
        references = "https://github.com/byt3bl33d3r/CrackMapExec"
        mitre = "attack.execution, attack.t1047, attack.t1053, attack.t1059.003, attack.t1059.001, attack.s0106"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /cmd\.exe \/Q \/c .* 1> \\\\.*\\.*\\.* 2>&1|cmd\.exe \/C .* > \\\\.*\\.*\\.* 2>&1|cmd\.exe \/C .* > .*\\Temp\\.* 2>&1|powershell\.exe -exec bypass -noni -nop -w 1 -C "|powershell\.exe -noni -nop -w 1 -enc / nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_hktl_hashcat.yaral ###
rule hacktool_-_hashcat_password_cracker_execution {
    meta:
        description = "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1110.002/T1110.002.md#atomic-test-1---password-cracking-with-hashcat, https://hashcat.net/wiki/doku.php?id=hashcat"
        mitre = "attack.credential-access, attack.t1110.002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\hashcat\.exe$/ nocase or
        ($event.target.process.command_line = /-a / nocase and
        $event.target.process.command_line = /-m 1000 / nocase and
        $event.target.process.command_line = /-r / nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_hktl_lazagne.yaral ###
rule hacktool_-_lazagne_execution {
    meta:
        description = "Detects the execution of the LaZagne. A utility used to retrieve multiple types of passwords stored on a local computer.
LaZagne has been leveraged multiple times by threat actors in order to dump credentials.
"
        references = "https://github.com/AlessandroZ/LaZagne/tree/master, https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/, https://cloud.google.com/blog/topics/threat-intelligence/alphv-ransomware-backup/, https://securelist.com/defttorero-tactics-techniques-and-procedures/107610/, https://github.com/CyberMonitor/APT_CyberCriminal_Campagin_Collections/raw/800c0e06571993a54e39571cf27fd474dcc5c0bc/2017/2017.11.14.Muddying_the_Water/muddying-the-water-targeted-attacks.pdf"
        mitre = "attack.credential-access"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\lazagne\.exe$/ nocase or
        ($event.target.process.file.full_path = /:\\PerfLogs\\|:\\ProgramData\\|:\\Temp\\|:\\Tmp\\|:\\Windows\\Temp\\|\\AppData\\|\\Downloads\\|\\Users\\Public\\/ nocase and
        $event.target.process.command_line = /\.exe all|\.exe browsers|\.exe chats|\.exe databases|\.exe games|\.exe git|\.exe mails|\.exe maven|\.exe memory|\.exe multimedia|\.exe sysadmin|\.exe unused|\.exe wifi|\.exe windows/ nocase) or
        ($event.target.process.command_line = /all |browsers |chats |databases |games |git |mails |maven |memory |multimedia |php |svn |sysadmin |unused |wifi |windows / nocase and
        $event.target.process.command_line = /-oA|-oJ|-oN|-output|-password|-1Password|-apachedirectorystudio|-autologon|-ChromiumBased|-composer|-coreftp|-credfiles|-credman|-cyberduck|-dbvis|-EyeCon|-filezilla|-filezillaserver|-ftpnavigator|-galconfusion|-gitforwindows|-hashdump|-iisapppool|-IISCentralCertP|-kalypsomedia|-keepass|-keepassconfig|-lsa_secrets|-mavenrepositories|-memory_dump|-Mozilla|-mRemoteNG|-mscache|-opensshforwindows|-openvpn|-outlook|-pidgin|-postgresql|-psi-im|-puttycm|-pypykatz|-Rclone|-rdpmanager|-robomongo|-roguestale|-skype|-SQLDeveloper|-squirrel|-tortoise|-turba|-UCBrowser|-unattended|-vault|-vaultfiles|-vnc|-windows|-winscp|-wsl/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_hktl_mimikatz_command_line.yaral ###
rule hacktool_-_mimikatz_execution {
    meta:
        description = "Detection well-known mimikatz command line arguments"
        references = "https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment, https://tools.thehacker.recipes/mimikatz/modules"
        mitre = "attack.credential-access, attack.t1003.001, attack.t1003.002, attack.t1003.004, attack.t1003.005, attack.t1003.006"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /DumpCreds|mimikatz/ nocase or
        $event.target.process.command_line = /::aadcookie|::detours|::memssp|::mflt|::ncroutemon|::ngcsign|::printnightmare|::skeleton|::preshutdown|::mstsc|::multirdp/ nocase or
        $event.target.process.command_line = /rpc::|token::|crypto::|dpapi::|sekurlsa::|kerberos::|lsadump::|privilege::|process::|vault::/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_hktl_soaphound_execution.yaral ###
rule hacktool_-_soaphound_execution {
    meta:
        description = "Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.
"
        references = "https://github.com/FalconForceTeam/SOAPHound, https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c"
        mitre = "attack.discovery, attack.t1087"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = / --buildcache | --bhdump | --certdump | --dnsdump / nocase and
        $event.target.process.command_line = / -c | --cachefilename | -o | --outputdirectory/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_hktl_xordump.yaral ###
rule hacktool_-_xordump_execution {
    meta:
        description = "Detects suspicious use of XORDump process memory dumping utility"
        references = "https://github.com/audibleblink/xordump"
        mitre = "attack.defense-evasion, attack.t1036, attack.t1003.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\xordump\.exe$/ nocase or
        $event.target.process.command_line = / -process lsass\.exe | -m comsvcs | -m dbghelp | -m dbgcore / nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_iis_appcmd_susp_module_install.yaral ###
rule iis_native-code_module_command_line_installation {
    meta:
        description = "Detects suspicious IIS native-code module installations via command line"
        references = "https://researchcenter.paloaltonetworks.com/2018/01/unit42-oilrig-uses-rgdoor-iis-backdoor-targets-middle-east/, https://www.microsoft.com/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/"
        mitre = "attack.persistence, attack.t1505.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\appcmd\.exe$/ nocase or
        $event.target.process.file.names = "appcmd.exe" nocase) and
        $event.target.process.command_line = /install/ nocase and
        $event.target.process.command_line = /module/ nocase and
        $event.target.process.command_line = /-name:/ nocase or
        $event.target.process.command_line = /\/name:/ nocase or
        $event.target.process.command_line = /–name:/ nocase or
        $event.target.process.command_line = /—name:/ nocase or
        $event.target.process.command_line = /―name:/ nocase and
        $event.principal.process.file.full_path != "C:\\Windows\\System32\\inetsrv\\iissetup.exe" nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_imewbdld_download.yaral ###
rule arbitrary_file_download_via_imewdbld.exe {
    meta:
        description = "Detects usage of \"IMEWDBLD.exe\" to download arbitrary files"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1105/T1105.md#atomic-test-10---windows---powershell-download, https://lolbas-project.github.io/lolbas/Binaries/IMEWDBLD/"
        mitre = "attack.defense-evasion, attack.execution, attack.t1218"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\IMEWDBLD\.exe$/ nocase or
        $event.target.process.file.names = "imewdbld.exe" nocase) and
        $event.target.process.command_line = /http:\/\/|https:\/\// nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_infdefaultinstall_execute_sct_scripts.yaral ###
rule infdefaultinstall.exe_.inf_execution {
    meta:
        description = "Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file."
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md#atomic-test-4---infdefaultinstallexe-inf-execution, https://lolbas-project.github.io/lolbas/Binaries/Infdefaultinstall/"
        mitre = "attack.defense-evasion, attack.t1218"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /InfDefaultInstall\.exe / nocase and
        $event.target.process.command_line = /\.inf/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_lolbin_gather_network_info.yaral ###
rule potential_reconnaissance_activity_via_gathernetworkinfo.vbs {
    meta:
        description = "Detects execution of the built-in script located in \"C:\Windows\System32\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine"
        references = "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs, https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government"
        mitre = "attack.discovery, attack.execution, attack.t1615, attack.t1059.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\cscript\.exe|\\wscript\.exe/ nocase or
        $event.target.process.file.names = /cscript.exe|wscript.exe/ nocase) and
        $event.target.process.command_line = /gatherNetworkInfo\.vbs/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_lolbin_pcwutl.yaral ###
rule code_execution_via_pcwutl.dll {
    meta:
        description = "Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library."
        references = "https://lolbas-project.github.io/lolbas/Libraries/Pcwutl/, https://twitter.com/harr0ey/status/989617817849876488"
        mitre = "attack.defense-evasion, attack.t1218.011"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\rundll32\.exe$/ nocase or
        $event.target.process.file.names = "RUNDLL32.EXE" nocase) and
        $event.target.process.command_line = /pcwutl/ nocase and
        $event.target.process.command_line = /LaunchApplication/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_lolbin_pubprn.yaral ###
rule pubprn.vbs_proxy_execution {
    meta:
        description = "Detects the use of the 'Pubprn.vbs' Microsoft signed script to execute commands."
        references = "https://lolbas-project.github.io/lolbas/Scripts/Pubprn/"
        mitre = "attack.defense-evasion, attack.t1216.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /\\pubprn\.vbs/ nocase and
        $event.target.process.command_line = /script:/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_lolbin_replace.yaral ###
rule replace.exe_usage {
    meta:
        description = "Detects the use of Replace.exe which can be used to replace file with another file"
        references = "https://lolbas-project.github.io/lolbas/Binaries/Replace/, https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/replace"
        mitre = "attack.command-and-control, attack.t1105"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\replace\.exe$/ nocase and
        $event.target.process.command_line = /-a/ nocase or
        $event.target.process.command_line = /\/a/ nocase or
        $event.target.process.command_line = /–a/ nocase or
        $event.target.process.command_line = /—a/ nocase or
        $event.target.process.command_line = /―a/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_lolbin_scriptrunner.yaral ###
rule use_of_scriptrunner.exe {
    meta:
        description = "The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting"
        references = "https://lolbas-project.github.io/lolbas/Binaries/Scriptrunner/"
        mitre = "attack.defense-evasion, attack.execution, attack.t1218"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\ScriptRunner\.exe$/ nocase or
        $event.target.process.file.names = "ScriptRunner.exe" nocase) and
        $event.target.process.command_line = / -appvscript / nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_lolbin_susp_driver_installed_by_pnputil.yaral ###
rule suspicious_driver_install_by_pnputil.exe {
    meta:
        description = "Detects when a possible suspicious driver is being installed via pnputil.exe lolbin"
        references = "https://learn.microsoft.com/en-us/windows-hardware/drivers/devtest/pnputil-command-syntax, https://strontic.github.io/xcyclopedia/library/pnputil.exe-60EDC5E6BDBAEE441F2E3AEACD0340D2.html"
        mitre = "attack.persistence, attack.t1547"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /-i|\/install|-a|\/add-driver|\.inf/ nocase and
        $event.target.process.file.full_path = /\\pnputil\.exe$/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_microsoft_workflow_compiler_execution.yaral ###
rule microsoft_workflow_compiler_execution {
    meta:
        description = "Detects the execution of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code.
"
        references = "https://posts.specterops.io/arbitrary-unsigned-code-execution-vector-in-microsoft-workflow-compiler-exe-3d9294bc5efb, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md, https://lolbas-project.github.io/lolbas/Binaries/Microsoft.Workflow.Compiler/"
        mitre = "attack.defense-evasion, attack.execution, attack.t1127, attack.t1218, detection.threat-hunting"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\Microsoft\.Workflow\.Compiler\.exe$/ nocase or
        $event.target.process.file.names = "Microsoft.Workflow.Compiler.exe" nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_mofcomp_execution.yaral ###
rule potential_suspicious_mofcomp_execution {
    meta:
        description = "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.
The \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.
Attackers abuse this utility to install malicious MOF scripts
"
        references = "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/, https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml, https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp"
        mitre = "attack.defense-evasion, attack.t1218"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\mofcomp\.exe$/ nocase or
        $event.target.process.file.names = "mofcomp.exe" nocase) and
        ($event.principal.process.file.full_path = /\\cmd\.exe|\\powershell\.exe|\\pwsh\.exe|\\wsl\.exe|\\wscript\.exe|\\cscript\.exe/ nocase or
        $event.target.process.command_line = /\\AppData\\Local\\Temp|\\Users\\Public\\|\\WINDOWS\\Temp\\|%temp%|%tmp%|%appdata%/ nocase) and
        $event.principal.process.file.full_path = "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe" nocase and
        $event.target.process.command_line = /C:\\Windows\\TEMP\\/ nocase and
        $event.target.process.command_line = /\.mof$/ nocase and
        $event.target.process.command_line = /C:\\Windows\\TEMP\\/ nocase and
        $event.target.process.command_line = /\.mof$/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_mshta_http.yaral ###
rule remotely_hosted_hta_file_executed_via_mshta.exe {
    meta:
        description = "Detects execution of the \"mshta\" utility with an argument containing the \"http\" keyword, which could indicate that an attacker is executing a remotely hosted malicious hta file"
        references = "https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html"
        mitre = "attack.defense-evasion, attack.execution, attack.t1218.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\mshta\.exe$/ nocase or
        $event.target.process.file.names = "MSHTA.EXE" nocase) and
        $event.target.process.command_line = /http:\/\/|https:\/\/|ftp:\/\// nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_mshta_javascript.yaral ###
rule suspicious_javascript_execution_via_mshta.exe {
    meta:
        description = "Detects execution of javascript code using \"mshta.exe\"."
        references = "https://eqllib.readthedocs.io/en/latest/analytics/6bc283c4-21f2-4aed-a05c-a9a3ffa95dd4.html, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.005/T1218.005.md"
        mitre = "attack.defense-evasion, attack.t1218.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\mshta\.exe$/ nocase or
        $event.target.process.file.names = "MSHTA.EXE" nocase) and
        $event.target.process.command_line = /javascript/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_msiexec_dll.yaral ###
rule dllunregisterserver_function_call_via_msiexec.exe {
    meta:
        description = "Detects MsiExec loading a DLL and calling its DllUnregisterServer function"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md, https://lolbas-project.github.io/lolbas/Binaries/Msiexec/, https://twitter.com/_st0pp3r_/status/1583914515996897281"
        mitre = "attack.defense-evasion, attack.t1218.007"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\msiexec\.exe$/ nocase or
        $event.target.process.file.names = "\\msiexec.exe" nocase) and
        $event.target.process.command_line = / -z / nocase or
        $event.target.process.command_line = / \/z / nocase or
        $event.target.process.command_line = / –z / nocase or
        $event.target.process.command_line = / —z / nocase or
        $event.target.process.command_line = / ―z / nocase and
        $event.target.process.command_line = /\.dll/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_msiexec_execute_dll.yaral ###
rule suspicious_msiexec_execute_arbitrary_dll {
    meta:
        description = "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.
Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)
"
        references = "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md, https://twitter.com/_st0pp3r_/status/1583914515996897281"
        mitre = "attack.defense-evasion, attack.t1218.007"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\msiexec\.exe$/ nocase and
        $event.target.process.command_line = / -y/ nocase or
        $event.target.process.command_line = / \/y/ nocase or
        $event.target.process.command_line = / –y/ nocase or
        $event.target.process.command_line = / —y/ nocase or
        $event.target.process.command_line = / ―y/ nocase and
        ($event.target.process.command_line != /\\MsiExec\.exe" \/Y "C:\\Program Files\\Bonjour\\mdnsNSP\.dll/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" \/Y "C:\\Program Files \(x86\)\\Bonjour\\mdnsNSP\.dll/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" \/Y "C:\\Program Files \(x86\)\\Apple Software Update\\ScriptingObjectModel\.dll/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" \/Y "C:\\Program Files \(x86\)\\Apple Software Update\\SoftwareUpdateAdmin\.dll/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" \/Y "C:\\Windows\\CCM\\/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" \/Y C:\\Windows\\CCM\\/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" -Y "C:\\Program Files\\Bonjour\\mdnsNSP\.dll/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" -Y "C:\\Program Files \(x86\)\\Bonjour\\mdnsNSP\.dll/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" -Y "C:\\Program Files \(x86\)\\Apple Software Update\\ScriptingObjectModel\.dll/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" -Y "C:\\Program Files \(x86\)\\Apple Software Update\\SoftwareUpdateAdmin\.dll/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" -Y "C:\\Windows\\CCM\\/ nocase and
        $event.target.process.command_line != /\\MsiExec\.exe" -Y C:\\Windows\\CCM\\/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_msiexec_install_quiet.yaral ###
rule msiexec_quiet_installation {
    meta:
        description = "Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.
Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)
"
        references = "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.007/T1218.007.md, https://twitter.com/_st0pp3r_/status/1583914244344799235"
        mitre = "attack.defense-evasion, attack.t1218.007"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\msiexec\.exe$/ nocase or
        $event.target.process.file.names = "msiexec.exe" nocase) and
        ($event.target.process.command_line = /-i/ nocase or
        $event.target.process.command_line = /\/i/ nocase or
        $event.target.process.command_line = /–i/ nocase or
        $event.target.process.command_line = /—i/ nocase or
        $event.target.process.command_line = /―i/ nocase or
        $event.target.process.command_line = /-package/ nocase or
        $event.target.process.command_line = /\/package/ nocase or
        $event.target.process.command_line = /–package/ nocase or
        $event.target.process.command_line = /—package/ nocase or
        $event.target.process.command_line = /―package/ nocase or
        $event.target.process.command_line = /-a/ nocase or
        $event.target.process.command_line = /\/a/ nocase or
        $event.target.process.command_line = /–a/ nocase or
        $event.target.process.command_line = /—a/ nocase or
        $event.target.process.command_line = /―a/ nocase or
        $event.target.process.command_line = /-j/ nocase or
        $event.target.process.command_line = /\/j/ nocase or
        $event.target.process.command_line = /–j/ nocase or
        $event.target.process.command_line = /—j/ nocase or
        $event.target.process.command_line = /―j/ nocase) and
        $event.target.process.command_line = /-q/ nocase or
        $event.target.process.command_line = /\/q/ nocase or
        $event.target.process.command_line = /–q/ nocase or
        $event.target.process.command_line = /—q/ nocase or
        $event.target.process.command_line = /―q/ nocase and
        (($event.principal.process.file.full_path = /^C:\\Users\\/ nocase and
        $event.principal.process.file.full_path = /\\AppData\\Local\\Temp\\/ nocase) or
        $event.principal.process.file.full_path != /^C:\\Windows\\Temp\\/ nocase or
        ($event.principal.process.file.full_path = "C:\\Windows\\CCM\\Ccm32BitLauncher.exe" nocase and
        $event.target.process.integrity_level_rid = /System|S-1-16-16384/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_net_execution.yaral ###
rule net.exe_execution {
    meta:
        description = "Detects execution of \"Net.EXE\"."
        references = "https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/, https://eqllib.readthedocs.io/en/latest/analytics/4d2e7fc1-af0b-4915-89aa-03d25ba7805e.html, https://eqllib.readthedocs.io/en/latest/analytics/e61f557c-a9d0-4c25-ab5b-bbc46bb24deb.html, https://eqllib.readthedocs.io/en/latest/analytics/9b3dd402-891c-4c4d-a662-28947168ce61.html, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1007/T1007.md#atomic-test-2---system-service-discovery---netexe"
        mitre = "attack.discovery, attack.t1007, attack.t1049, attack.t1018, attack.t1135, attack.t1201, attack.t1069.001, attack.t1069.002, attack.t1087.001, attack.t1087.002, attack.lateral-movement, attack.t1021.002, attack.s0039, detection.threat-hunting"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\net\.exe|\\net1\.exe/ nocase or
        $event.target.process.file.names = /net.exe|net1.exe/ nocase) and
        $event.target.process.command_line = / accounts| group| localgroup| share| start| stop | user| view/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_net_groups_and_accounts_recon.yaral ###
rule suspicious_group_and_account_reconnaissance_activity_using_net.exe {
    meta:
        description = "Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE
Check if the user that executed the commands is suspicious (e.g. service accounts, LOCAL_SYSTEM)
"
        references = "https://redcanary.com/blog/how-one-hospital-thwarted-a-ryuk-ransomware-outbreak/, https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/, https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/"
        mitre = "attack.discovery, attack.t1087.001, attack.t1087.002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\net\.exe|\\net1\.exe/ nocase or
        $event.target.process.file.names = /net.exe|net1.exe/ nocase) and
        (($event.target.process.command_line = / group | localgroup / nocase and
        $event.target.process.command_line = /domain admins| administrator| administrateur|enterprise admins|Exchange Trusted Subsystem|Remote Desktop Users|Utilisateurs du Bureau à distance|Usuarios de escritorio remoto| \/do/ nocase and
        $event.target.process.command_line != / \/add/ nocase) or
        ($event.target.process.command_line = / accounts / nocase and
        $event.target.process.command_line = / \/do/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_net_share_unmount.yaral ###
rule unmount_share_via_net.exe {
    meta:
        description = "Detects when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.005/T1070.005.md"
        mitre = "attack.defense-evasion, attack.t1070.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\net\.exe|\\net1\.exe/ nocase or
        $event.target.process.file.names = /net.exe|net1.exe/ nocase) and
        $event.target.process.command_line = /share/ nocase and
        $event.target.process.command_line = /\/delete/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_net_stop_service.yaral ###
rule stop_windows_service_via_net.exe {
    meta:
        description = "Detects the stopping of a Windows service via the \"net\" utility."
        references = "https://ss64.com/nt/net-service.html"
        mitre = "attack.impact, attack.t1489"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = /net.exe|net1.exe/ nocase or
        $event.target.process.file.full_path = /\\net\.exe|\\net1\.exe/ nocase) and
        $event.target.process.command_line = / stop / nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_net_use_mount_share.yaral ###
rule windows_share_mount_via_net.exe {
    meta:
        description = "Detects when a share is mounted using the \"net.exe\" utility"
        references = "https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view"
        mitre = "attack.lateral-movement, attack.t1021.002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\net\.exe|\\net1\.exe/ nocase or
        $event.target.process.file.names = /net.exe|net1.exe/ nocase) and
        $event.target.process.command_line = / use | \\\\/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_net_user_add.yaral ###
rule new_user_created_via_net.exe {
    meta:
        description = "Identifies the creation of local users via the net.exe command."
        references = "https://eqllib.readthedocs.io/en/latest/analytics/014c3f51-89c6-40f1-ac9c-5688f26090ab.html, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1136.001/T1136.001.md"
        mitre = "attack.persistence, attack.t1136.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\net\.exe|\\net1\.exe/ nocase or
        $event.target.process.file.names = /net.exe|net1.exe/ nocase) and
        $event.target.process.command_line = /user/ nocase and
        $event.target.process.command_line = /add/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_net_user_default_accounts_manipulation.yaral ###
rule suspicious_manipulation_of_default_accounts_via_net.exe {
    meta:
        description = "Detects suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc"
        references = "https://www.trellix.com/en-sg/about/newsroom/stories/threat-labs/lockergoga-ransomware-family-used-in-targeted-attacks.html, https://redacted.com/blog/bianlian-ransomware-gang-gives-it-a-go/, https://www.microsoft.com/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/"
        mitre = "attack.collection, attack.t1560.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\net\.exe|\\net1\.exe/ nocase or
        $event.target.process.file.names = /net.exe|net1.exe/ nocase) and
        $event.target.process.command_line = / user / nocase and
        $event.target.process.command_line = / Järjestelmänvalvoja | Rendszergazda | Администратор | Administrateur | Administrador | Administratör | Administrator | guest | DefaultAccount | "Järjestelmänvalvoja" | "Rendszergazda" | "Администратор" | "Administrateur" | "Administrador" | "Administratör" | "Administrator" | "guest" | "DefaultAccount" | 'Järjestelmänvalvoja' | 'Rendszergazda' | 'Администратор' | 'Administrateur' | 'Administrador' | 'Administratör' | 'Administrator' | 'guest' | 'DefaultAccount' / nocase and
        $event.target.process.command_line = /guest/ nocase and
        $event.target.process.command_line = /\/active no/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_net_view_share_and_sessions_enum.yaral ###
rule share_and_session_enumeration_using_net.exe {
    meta:
        description = "Detects attempts to enumerate file shares, printer shares and sessions using \"net.exe\" with the \"view\" flag."
        references = "https://eqllib.readthedocs.io/en/latest/analytics/b8a94d2f-dc75-4630-9d73-1edc6bd26fff.html, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1018/T1018.md"
        mitre = "attack.discovery, attack.t1018"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\net\.exe|\\net1\.exe/ nocase or
        $event.target.process.file.names = /net.exe|net1.exe/ nocase) and
        $event.target.process.command_line = /view/ nocase and
        $event.target.process.command_line != /\\\\/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_netsh_fw_add_rule.yaral ###
rule new_firewall_rule_added_via_netsh.exe {
    meta:
        description = "Detects the addition of a new rule to the Windows firewall via netsh"
        references = "https://web.archive.org/web/20190508165435/https://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-RAT-and-Staging-Report.pdf"
        mitre = "attack.defense-evasion, attack.t1562.004, attack.s0246"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\netsh\.exe$/ nocase or
        $event.target.process.file.names = "netsh.exe" nocase) and
        $event.target.process.command_line = / firewall / nocase and
        $event.target.process.command_line = / add / nocase and
        ($event.target.process.command_line != /advfirewall firewall add rule name=Dropbox dir=in action=allow "program=.:\\Program Files \(x86\)\\Dropbox\\Client\\Dropbox\.exe" enable=yes profile=Any/ nocase and
        $event.target.process.command_line != /advfirewall firewall add rule name=Dropbox dir=in action=allow "program=.:\\Program Files\\Dropbox\\Client\\Dropbox\.exe" enable=yes profile=Any/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_netsh_helper_dll_persistence.yaral ###
rule potential_persistence_via_netsh_helper_dll {
    meta:
        description = "Detects the execution of netsh with \"add helper\" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md, https://github.com/outflanknl/NetshHelperBeacon, https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/"
        mitre = "attack.privilege-escalation, attack.persistence, attack.t1546.007, attack.s0108"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "netsh.exe" nocase or
        $event.target.process.file.full_path = /\\netsh\.exe$/ nocase) and
        $event.target.process.command_line = /add/ nocase and
        $event.target.process.command_line = /helper/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_netsh_packet_capture.yaral ###
rule new_network_trace_capture_started_via_netsh.exe {
    meta:
        description = "Detects the execution of netsh with the \"trace\" flag in order to start a network capture"
        references = "https://blogs.msdn.microsoft.com/canberrapfe/2012/03/30/capture-a-network-trace-without-installing-anything-capture-a-network-trace-of-a-reboot/, https://klausjochem.me/2016/02/03/netsh-the-cyber-attackers-tool-of-choice/"
        mitre = "attack.discovery, attack.credential-access, attack.t1040"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\netsh\.exe$/ nocase or
        $event.target.process.file.names = "netsh.exe" nocase) and
        $event.target.process.command_line = /trace/ nocase and
        $event.target.process.command_line = /start/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_netsh_port_forwarding.yaral ###
rule new_port_forwarding_rule_added_via_netsh.exe {
    meta:
        description = "Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule"
        references = "https://www.fireeye.com/blog/threat-research/2019/01/bypassing-network-restrictions-through-rdp-tunneling.html, https://adepts.of0x.cc/netsh-portproxy-code/, https://www.dfirnotes.net/portproxy_detection/"
        mitre = "attack.lateral-movement, attack.defense-evasion, attack.command-and-control, attack.t1090"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\netsh\.exe$/ nocase or
        $event.target.process.file.names = "netsh.exe" nocase) and
        (($event.target.process.command_line = /interface/ nocase and
        $event.target.process.command_line = /portproxy/ nocase and
        $event.target.process.command_line = /add/ nocase and
        $event.target.process.command_line = /v4tov4/ nocase) or
        ($event.target.process.command_line = /i / nocase and
        $event.target.process.command_line = /p / nocase and
        $event.target.process.command_line = /a / nocase and
        $event.target.process.command_line = /v / nocase) or
        ($event.target.process.command_line = /connectp/ nocase and
        $event.target.process.command_line = /listena/ nocase and
        $event.target.process.command_line = /c=/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_netsh_wifi_credential_harvesting.yaral ###
rule harvesting_of_wifi_credentials_via_netsh.exe {
    meta:
        description = "Detect the harvesting of wifi credentials using netsh.exe"
        references = "https://blog.malwarebytes.com/threat-analysis/2020/04/new-agenttesla-variant-steals-wifi-credentials/"
        mitre = "attack.discovery, attack.credential-access, attack.t1040"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\netsh\.exe$/ nocase or
        $event.target.process.file.names = "netsh.exe" nocase) and
        $event.target.process.command_line = /wlan/ nocase and
        $event.target.process.command_line = / s/ nocase and
        $event.target.process.command_line = / p/ nocase and
        $event.target.process.command_line = / k/ nocase and
        $event.target.process.command_line = /=clear/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_nltest_execution.yaral ###
rule nltest.exe_execution {
    meta:
        description = "Detects nltest commands that can be used for information discovery"
        references = "https://jpcertcc.github.io/ToolAnalysisResultSheet/details/nltest.htm"
        mitre = "attack.discovery, attack.t1016, attack.t1018, attack.t1482"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\nltest\.exe$/ nocase or
        $event.target.process.file.names = "nltestrk.exe" nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_nltest_recon.yaral ###
rule potential_recon_activity_via_nltest.exe {
    meta:
        description = "Detects nltest commands that can be used for information discovery"
        references = "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731935(v=ws.11), https://thedfirreport.com/2021/08/16/trickbot-leads-up-to-fake-1password-installation/, https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/, https://book.hacktricks.xyz/windows/basic-cmd-for-pentesters, https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/, https://eqllib.readthedocs.io/en/latest/analytics/03e231a6-74bc-467a-acb1-e5676b0fb55e.html, https://redcanary.com/blog/how-one-hospital-thwarted-a-ryuk-ransomware-outbreak/, https://github.com/redcanaryco/atomic-red-team/blob/5360c9d9ffa3b25f6495f7a16e267b719eba2c37/atomics/T1482/T1482.md#atomic-test-2---windows---discover-domain-trusts-with-nltest"
        mitre = "attack.discovery, attack.t1016, attack.t1482"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\nltest\.exe$/ nocase or
        $event.target.process.file.names = "nltestrk.exe" nocase) and
        (($event.target.process.command_line = /server/ nocase and
        $event.target.process.command_line = /query/ nocase) or
        $event.target.process.command_line = /\/user|all_trusts|dclist:|dnsgetdc:|domain_trusts|dsgetdc:|parentdomain|trusted_domains/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_odbcconf_register_dll_regsvr.yaral ###
rule new_dll_registered_via_odbcconf.exe {
    meta:
        description = "Detects execution of \"odbcconf\" with \"REGSVR\" in order to register a new DLL (equivalent to running regsvr32). Attackers abuse this to install and run malicious DLLs."
        references = "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16, https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/, https://redcanary.com/blog/raspberry-robin/, https://web.archive.org/web/20191023232753/https://twitter.com/Hexacorn/status/1187143326673330176, https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/, https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html"
        mitre = "attack.defense-evasion, attack.t1218.008"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\odbcconf\.exe$/ nocase or
        $event.target.process.file.names = "odbcconf.exe" nocase) and
        $event.target.process.command_line = /REGSVR / nocase and
        $event.target.process.command_line = /\.dll/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_odbcconf_response_file.yaral ###
rule response_file_execution_via_odbcconf.exe {
    meta:
        description = "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action."
        references = "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16, https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/, https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control, https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/"
        mitre = "attack.defense-evasion, attack.t1218.008"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\odbcconf\.exe$/ nocase or
        $event.target.process.file.names = "odbcconf.exe" nocase) and
        $event.target.process.command_line = / -f / nocase or
        $event.target.process.command_line = / \/f / nocase or
        $event.target.process.command_line = / –f / nocase or
        $event.target.process.command_line = / —f / nocase or
        $event.target.process.command_line = / ―f / nocase and
        $event.target.process.command_line = /\.rsp/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_pktmon_execution.yaral ###
rule pktmon.exe_execution {
    meta:
        description = "Detects execution of PktMon, a tool that captures network packets."
        references = "https://lolbas-project.github.io/lolbas/Binaries/Pktmon/"
        mitre = "attack.credential-access, attack.t1040"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\pktmon\.exe$/ nocase or
        $event.target.process.file.names = "PktMon.exe" nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_powershell_amsi_init_failed_bypass.yaral ###
rule potential_amsi_bypass_via_.net_reflection {
    meta:
        description = "Detects Request to \"amsiInitFailed\" that can be used to disable AMSI Scanning"
        references = "https://s3cur3th1ssh1t.github.io/Bypass_AMSI_by_manual_modification/, https://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/"
        mitre = "attack.defense-evasion, attack.t1562.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.command_line = /System\.Management\.Automation\.AmsiUtils/ nocase and
        $event.target.process.command_line = /amsiInitFailed/ nocase) or
        ($event.target.process.command_line = /\[Ref\]\.Assembly\.GetType/ nocase and
        $event.target.process.command_line = /SetValue\(\$null,\$true\)/ nocase and
        $event.target.process.command_line = /NonPublic,Static/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_powershell_dsinternals_cmdlets.yaral ###
rule dsinternals_suspicious_powershell_cmdlets {
    meta:
        description = "Detects execution and usage of the DSInternals PowerShell module. Which can be used to perform what might be considered as suspicious activity such as dumping DPAPI backup keys or manipulating NTDS.DIT files.
The DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory. These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.
"
        references = "https://github.com/MichaelGrafnetter/DSInternals/blob/39ee8a69bbdc1cfd12c9afdd7513b4788c4895d4/Src/DSInternals.PowerShell/DSInternals.psd1"
        mitre = "attack.execution, attack.t1059.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /Add-ADDBSidHistory|Add-ADNgcKey|Add-ADReplNgcKey|ConvertFrom-ADManagedPasswordBlob|ConvertFrom-GPPrefPassword|ConvertFrom-ManagedPasswordBlob|ConvertFrom-UnattendXmlPassword|ConvertFrom-UnicodePassword|ConvertTo-AADHash|ConvertTo-GPPrefPassword|ConvertTo-KerberosKey|ConvertTo-LMHash|ConvertTo-MsoPasswordHash|ConvertTo-NTHash|ConvertTo-OrgIdHash|ConvertTo-UnicodePassword|Disable-ADDBAccount|Enable-ADDBAccount|Get-ADDBAccount|Get-ADDBBackupKey|Get-ADDBDomainController|Get-ADDBGroupManagedServiceAccount|Get-ADDBKdsRootKey|Get-ADDBSchemaAttribute|Get-ADDBServiceAccount|Get-ADDefaultPasswordPolicy|Get-ADKeyCredential|Get-ADPasswordPolicy|Get-ADReplAccount|Get-ADReplBackupKey|Get-ADReplicationAccount|Get-ADSIAccount|Get-AzureADUserEx|Get-BootKey|Get-KeyCredential|Get-LsaBackupKey|Get-LsaPolicy|Get-SamPasswordPolicy|Get-SysKey|Get-SystemKey|New-ADDBRestoreFromMediaScript|New-ADKeyCredential|New-ADNgcKey|New-NTHashSet|Remove-ADDBObject|Save-DPAPIBlob|Set-ADAccountPasswordHash|Set-ADDBAccountPassword|Set-ADDBBootKey|Set-ADDBDomainController|Set-ADDBPrimaryGroup|Set-ADDBSysKey|Set-AzureADUserEx|Set-LsaPolicy|Set-SamAccountPasswordHash|Set-WinUserPasswordHash|Test-ADDBPasswordQuality|Test-ADPasswordQuality|Test-ADReplPasswordQuality|Test-PasswordQuality|Unlock-ADDBAccount|Write-ADNgcKey|Write-ADReplNgcKey/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_powershell_getprocess_lsass.yaral ###
rule powershell_get-process_lsass {
    meta:
        description = "Detects a \"Get-Process\" cmdlet and it's aliases on lsass process, which is in almost all cases a sign of malicious activity"
        references = "https://web.archive.org/web/20220205033028/https://twitter.com/PythonResponder/status/1385064506049630211"
        mitre = "attack.credential-access, attack.t1552.004"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /Get-Process lsas|ps lsas|gps lsas/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_powershell_invocation_specific.yaral ###
rule suspicious_powershell_invocations_-_specific_-_processcreation {
    meta:
        description = "Detects suspicious PowerShell invocation command parameters"
        references = "Internal Research"
        mitre = "attack.defense-evasion"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.command_line = /-nop/ nocase and
        $event.target.process.command_line = / -w / nocase and
        $event.target.process.command_line = /hidden/ nocase and
        $event.target.process.command_line = / -c / nocase and
        $event.target.process.command_line = /\[Convert\]::FromBase64String/ nocase) or
        ($event.target.process.command_line = / -w / nocase and
        $event.target.process.command_line = /hidden/ nocase and
        $event.target.process.command_line = /-noni/ nocase and
        $event.target.process.command_line = /-nop/ nocase and
        $event.target.process.command_line = / -c / nocase and
        $event.target.process.command_line = /iex/ nocase and
        $event.target.process.command_line = /New-Object/ nocase) or
        ($event.target.process.command_line = / -w / nocase and
        $event.target.process.command_line = /hidden/ nocase and
        $event.target.process.command_line = /-ep/ nocase and
        $event.target.process.command_line = /bypass/ nocase and
        $event.target.process.command_line = /-Enc/ nocase) or
        ($event.target.process.command_line = /powershell/ nocase and
        $event.target.process.command_line = /reg/ nocase and
        $event.target.process.command_line = /add/ nocase and
        $event.target.process.command_line = /\\software\\/ nocase) or
        ($event.target.process.command_line = /bypass/ nocase and
        $event.target.process.command_line = /-noprofile/ nocase and
        $event.target.process.command_line = /-windowstyle/ nocase and
        $event.target.process.command_line = /hidden/ nocase and
        $event.target.process.command_line = /new-object/ nocase and
        $event.target.process.command_line = /system\.net\.webclient/ nocase and
        $event.target.process.command_line = /\.download/ nocase) or
        ($event.target.process.command_line = /iex/ nocase and
        $event.target.process.command_line = /New-Object/ nocase and
        $event.target.process.command_line = /Net\.WebClient/ nocase and
        $event.target.process.command_line = /\.Download/ nocase)) and
        ($event.target.process.command_line != /\(New-Object System\.Net\.WebClient\)\.DownloadString\('https:\/\/community\.chocolatey\.org\/install\.ps1/ nocase and
        $event.target.process.command_line != /Write-ChocolateyWarning/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_powershell_invoke_webrequest_download.yaral ###
rule suspicious_invoke-webrequest_execution {
    meta:
        description = "Detects a suspicious call to Invoke-WebRequest cmdlet where the and output is located in a suspicious location"
        references = "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/"
        mitre = "attack.command-and-control, attack.t1105"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\powershell\.exe|\\pwsh\.exe/ nocase or
        $event.target.process.file.names = /PowerShell.EXE|pwsh.dll/ nocase) and
        $event.target.process.command_line = /curl |Invoke-WebRequest|iwr |wget / nocase and
        $event.target.process.command_line = / -ur| -o/ nocase and
        $event.target.process.command_line = /\\AppData\\|\\Desktop\\|\\Temp\\|\\Users\\Public\\|%AppData%|%Public%|%Temp%|%tmp%|:\\Windows\\/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_powershell_malicious_cmdlets.yaral ###
rule malicious_powershell_commandlets_-_processcreation {
    meta:
        description = "Detects Commandlet names from well-known PowerShell exploitation frameworks"
        references = "https://adsecurity.org/?p=2921, https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries, https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1, https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1, https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1, https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1, https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/, https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/, https://github.com/calebstewart/CVE-2021-1675, https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1, https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html, https://github.com/HarmJ0y/DAMP, https://github.com/samratashok/nishang, https://github.com/DarkCoderSc/PowerRunAsSystem/, https://github.com/besimorhino/powercat, https://github.com/Kevin-Robertson/Powermad, https://github.com/adrecon/ADRecon, https://github.com/adrecon/AzureADRecon"
        mitre = "attack.execution, attack.discovery, attack.t1482, attack.t1087, attack.t1087.001, attack.t1087.002, attack.t1069.001, attack.t1069.002, attack.t1069, attack.t1059.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /Add-Exfiltration|Add-Persistence|Add-RegBackdoor|Add-RemoteRegBackdoor|Add-ScrnSaveBackdoor|Check-VM|ConvertTo-Rc4ByteStream|Decrypt-Hash|Disable-ADIDNSNode|Disable-MachineAccount|Do-Exfiltration|Enable-ADIDNSNode|Enable-MachineAccount|Enabled-DuplicateToken|Exploit-Jboss|Export-ADR|Export-ADRCSV|Export-ADRExcel|Export-ADRHTML|Export-ADRJSON|Export-ADRXML|Find-Fruit|Find-GPOLocation|Find-TrustedDocuments|Get-ADIDNS|Get-ApplicationHost|Get-ChromeDump|Get-ClipboardContents|Get-FoxDump|Get-GPPPassword|Get-IndexedItem|Get-KerberosAESKey|Get-Keystrokes|Get-LSASecret|Get-MachineAccountAttribute|Get-MachineAccountCreator|Get-PassHashes|Get-RegAlwaysInstallElevated|Get-RegAutoLogon|Get-RemoteBootKey|Get-RemoteCachedCredential|Get-RemoteLocalAccountHash|Get-RemoteLSAKey|Get-RemoteMachineAccountHash|Get-RemoteNLKMKey|Get-RickAstley|Get-Screenshot|Get-SecurityPackages|Get-ServiceFilePermission|Get-ServicePermission|Get-ServiceUnquoted|Get-SiteListPassword|Get-System|Get-TimedScreenshot|Get-UnattendedInstallFile|Get-Unconstrained|Get-USBKeystrokes|Get-VaultCredential|Get-VulnAutoRun|Get-VulnSchTask|Grant-ADIDNSPermission|Gupt-Backdoor|HTTP-Login|Install-ServiceBinary|Install-SSP|Invoke-ACLScanner|Invoke-ADRecon|Invoke-ADSBackdoor|Invoke-AgentSmith|Invoke-AllChecks|Invoke-ARPScan|Invoke-AzureHound|Invoke-BackdoorLNK|Invoke-BadPotato|Invoke-BetterSafetyKatz|Invoke-BypassUAC|Invoke-Carbuncle|Invoke-Certify|Invoke-ConPtyShell|Invoke-CredentialInjection|Invoke-DAFT|Invoke-DCSync|Invoke-DinvokeKatz|Invoke-DllInjection|Invoke-DNSUpdate|Invoke-DomainPasswordSpray|Invoke-DowngradeAccount|Invoke-EgressCheck|Invoke-Eyewitness|Invoke-FakeLogonScreen|Invoke-Farmer|Invoke-Get-RBCD-Threaded|Invoke-Gopher|Invoke-Grouper|Invoke-HandleKatz|Invoke-ImpersonatedProcess|Invoke-ImpersonateSystem|Invoke-InteractiveSystemPowerShell|Invoke-Internalmonologue|Invoke-Inveigh|Invoke-InveighRelay|Invoke-KrbRelay|Invoke-LdapSignCheck|Invoke-Lockless|Invoke-MalSCCM|Invoke-Mimikatz|Invoke-Mimikittenz|Invoke-MITM6|Invoke-NanoDump|Invoke-NetRipper|Invoke-Nightmare|Invoke-NinjaCopy|Invoke-OfficeScrape|Invoke-OxidResolver|Invoke-P0wnedshell|Invoke-Paranoia|Invoke-PortScan|Invoke-PoshRatHttp|Invoke-PostExfil|Invoke-PowerDump|Invoke-PowerShellTCP|Invoke-PowerShellWMI|Invoke-PPLDump|Invoke-PsExec|Invoke-PSInject|Invoke-PsUaCme|Invoke-ReflectivePEInjection|Invoke-ReverseDNSLookup|Invoke-Rubeus|Invoke-RunAs|Invoke-SafetyKatz|Invoke-SauronEye|Invoke-SCShell|Invoke-Seatbelt|Invoke-ServiceAbuse|Invoke-ShadowSpray|Invoke-Sharp|Invoke-Shellcode|Invoke-SMBScanner|Invoke-Snaffler|Invoke-Spoolsample|Invoke-SpraySinglePassword|Invoke-SSHCommand|Invoke-StandIn|Invoke-StickyNotesExtract|Invoke-SystemCommand|Invoke-Tasksbackdoor|Invoke-Tater|Invoke-Thunderfox|Invoke-ThunderStruck|Invoke-TokenManipulation|Invoke-Tokenvator|Invoke-TotalExec|Invoke-UrbanBishop|Invoke-UserHunter|Invoke-VoiceTroll|Invoke-Whisker|Invoke-WinEnum|Invoke-winPEAS|Invoke-WireTap|Invoke-WmiCommand|Invoke-WMIExec|Invoke-WScriptBypassUAC|Invoke-Zerologon|MailRaider|New-ADIDNSNode|New-DNSRecordArray|New-HoneyHash|New-InMemoryModule|New-MachineAccount|New-SOASerialNumberArray|Out-Minidump|Port-Scan|PowerBreach|powercat |PowerUp|PowerView|Remove-ADIDNSNode|Remove-MachineAccount|Remove-Update|Rename-ADIDNSNode|Revoke-ADIDNSPermission|Set-ADIDNSNode|Set-MacAttribute|Set-MachineAccountAttribute|Set-Wallpaper|Show-TargetScreen|Start-CaptureServer|Start-Dnscat2|Start-WebcamRecorder|VolumeShadowCopyTools/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_powershell_susp_child_processes.yaral ###
rule potentially_suspicious_powershell_child_processes {
    meta:
        description = "Detects potentially suspicious child processes spawned by PowerShell.
Use this rule to hunt for potential anomalies initiating from PowerShell scripts and commands.
"
        references = "https://twitter.com/ankit_anubhav/status/1518835408502620162"
        mitre = "attack.execution, attack.t1059.001, detection.threat-hunting"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.principal.process.file.full_path = /\\powershell_ise\.exe|\\powershell\.exe|\\pwsh\.exe/ nocase and
        $event.target.process.file.full_path = /\\bash\.exe|\\bitsadmin\.exe|\\certutil\.exe|\\cscript\.exe|\\forfiles\.exe|\\hh\.exe|\\mshta\.exe|\\regsvr32\.exe|\\rundll32\.exe|\\schtasks\.exe|\\scrcons\.exe|\\scriptrunner\.exe|\\sh\.exe|\\wmic\.exe|\\wscript\.exe/ nocase and
        (($event.target.process.file.full_path = /\\certutil\.exe$/ nocase and
        $event.target.process.command_line = /-verifystore / nocase) or
        ($event.target.process.file.full_path = /\\wmic\.exe$/ nocase and
        $event.target.process.command_line = /qfe list|diskdrive |csproduct |computersystem | os |/ nocase)) and
        $event.principal.process.command_line = /\\Program Files\\Amazon\\WorkspacesConfig\\Scripts\\/ nocase and
        $event.target.process.command_line = /\\Program Files\\Amazon\\WorkspacesConfig\\Scripts\\/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_powershell_zip_compress.yaral ###
rule folder_compress_to_potentially_suspicious_output_via_compress-archive_cmdlet {
    meta:
        description = "Detects PowerShell scripts that make use of the \"Compress-Archive\" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.
An adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md, https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a"
        mitre = "attack.collection, attack.t1074.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /Compress-Archive -Path.*-DestinationPath \$env:TEMP|Compress-Archive -Path.*-DestinationPath.*\\AppData\\Local\\Temp\\|Compress-Archive -Path.*-DestinationPath.*:\\Windows\\Temp\\/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_pua_adfind_enumeration.yaral ###
rule pua_-_suspicious_activedirectory_enumeration_via_adfind.exe {
    meta:
        description = "Detects active directory enumeration activity using known AdFind CLI flags"
        references = "https://www.joeware.net/freetools/tools/adfind/, https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1087.002/T1087.002.md"
        mitre = "attack.discovery, attack.t1087.002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /lockoutduration|lockoutthreshold|lockoutobservationwindow|maxpwdage|minpwdage|minpwdlength|pwdhistorylength|pwdproperties/ nocase or
        $event.target.process.command_line = /-sc admincountdmp/ nocase or
        $event.target.process.command_line = /-sc exchaddresses/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_pua_adfind_susp_usage.yaral ###
rule pua_-_adfind_suspicious_execution {
    meta:
        description = "Detects AdFind execution with common flags seen used during attacks"
        references = "https://www.joeware.net/freetools/tools/adfind/, https://thedfirreport.com/2020/05/08/adfind-recon/, https://thedfirreport.com/2021/01/11/trickbot-still-alive-and-well/, https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/, https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx, https://github.com/center-for-threat-informed-defense/adversary_emulation_library/blob/bf62ece1c679b07b5fb49c4bae947fe24c81811f/fin6/Emulation_Plan/Phase1.md, https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1087.002/T1087.002.md#atomic-test-7---adfind---enumerate-active-directory-user-objects"
        mitre = "attack.discovery, attack.t1018, attack.t1087.002, attack.t1482, attack.t1069.002, stp.1u"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /domainlist|trustdmp|dcmodes|adinfo| dclist |computer_pwdnotreqd|objectcategory=|-subnets -f|name="Domain Admins"|-sc u:|domainncs|dompol| oudmp |subnetdmp|gpodmp|fspdmp|users_noexpire|computers_active|computers_pwdnotreqd/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_reg_add_run_key.yaral ###
rule potential_persistence_attempt_via_run_keys_using_reg.exe {
    meta:
        description = "Detects suspicious command line reg.exe tool adding key to RUN key in Registry"
        references = "https://app.any.run/tasks/9c0f37bc-867a-4314-b685-e101566766d7/, https://learn.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys"
        mitre = "attack.persistence, attack.t1547.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /reg/ nocase and
        $event.target.process.command_line = / ADD / nocase and
        $event.target.process.command_line = /Software\\Microsoft\\Windows\\CurrentVersion\\Run/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_reg_enable_windows_recall.yaral ###
rule windows_recall_feature_enabled_via_reg.exe {
    meta:
        description = "Detects the enabling of the Windows Recall feature via registry manipulation.
Windows Recall can be enabled by deleting the existing \"DisableAIDataAnalysis\" value, or setting it to 0.
Adversaries may enable Windows Recall as part of post-exploitation discovery and collection activities.
This rule assumes that Recall is already explicitly disabled on the host, and subsequently enabled by the adversary.
"
        references = "https://learn.microsoft.com/en-us/windows/client-management/manage-recall, https://learn.microsoft.com/en-us/windows/client-management/mdm/policy-csp-windowsai#disableaidataanalysis"
        mitre = "attack.collection, attack.t1113"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\reg\.exe$/ nocase or
        $event.target.process.file.names = "reg.exe" nocase) and
        $event.target.process.command_line = /Microsoft\\Windows\\WindowsAI/ nocase and
        $event.target.process.command_line = /DisableAIDataAnalysis/ nocase and
        ($event.target.process.command_line = /add|0/ nocase or
        $event.target.process.command_line = /delete/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_reg_enumeration_for_credentials_in_registry.yaral ###
rule enumeration_for_credentials_in_registry {
    meta:
        description = "Adversaries may search the Registry on compromised systems for insecurely stored credentials.
The Windows Registry stores configuration information that can be used by the system or other programs.
Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1552.002/T1552.002.md"
        mitre = "attack.credential-access, attack.t1552.002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\reg\.exe$/ nocase and
        $event.target.process.command_line = / query / nocase and
        $event.target.process.command_line = /\/t / nocase and
        $event.target.process.command_line = /REG_SZ/ nocase and
        $event.target.process.command_line = /\/s/ nocase and
        (($event.target.process.command_line = /\/f / nocase and
        $event.target.process.command_line = /HKLM/ nocase) or
        ($event.target.process.command_line = /\/f / nocase and
        $event.target.process.command_line = /HKCU/ nocase) or
        $event.target.process.command_line = /HKCU\\Software\\SimonTatham\\PuTTY\\Sessions/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_reg_lsa_ppl_protection_disabled.yaral ###
rule lsa_ppl_protection_disabled_via_reg.exe {
    meta:
        description = "Detects the usage of the \"reg.exe\" utility to disable PPL protection on the LSA process"
        references = "https://thedfirreport.com/2022/03/21/apt35-automates-initial-access-using-proxyshell/"
        mitre = "attack.defense-evasion, attack.t1562.010"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\reg\.exe$/ nocase or
        $event.target.process.file.names = "reg.exe" nocase) and
        $event.target.process.command_line = /SYSTEM\\CurrentControlSet\\Control\\Lsa/ nocase and
        $event.target.process.command_line = / add / nocase and
        $event.target.process.command_line = / \/d 0/ nocase and
        $event.target.process.command_line = / \/v RunAsPPL / nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_reg_query_registry.yaral ###
rule potential_configuration_and_service_reconnaissance_via_reg.exe {
    meta:
        description = "Detects the usage of \"reg.exe\" in order to query reconnaissance information from the registry. Adversaries may interact with the Windows registry to gather information about credentials, the system, configuration, and installed software."
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1012/T1012.md"
        mitre = "attack.discovery, attack.t1012, attack.t1007"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\reg\.exe$/ nocase or
        $event.target.process.file.names = "reg.exe" nocase) and
        $event.target.process.command_line = /query/ nocase and
        $event.target.process.command_line = /currentVersion\\windows|winlogon\\|currentVersion\\shellServiceObjectDelayLoad|currentVersion\\run|currentVersion\\policies\\explorer\\run|currentcontrolset\\services/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_reg_rdp_keys_tamper.yaral ###
rule potential_tampering_with_rdp_related_registry_keys_via_reg.exe {
    meta:
        description = "Detects the execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\Control\Terminal Server' values"
        references = "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
        mitre = "attack.defense-evasion, attack.lateral-movement, attack.t1021.001, attack.t1112"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\reg\.exe$/ nocase or
        $event.target.process.file.names = "reg.exe" nocase) and
        $event.target.process.command_line = / add / nocase and
        $event.target.process.command_line = /\\CurrentControlSet\\Control\\Terminal Server/ nocase and
        $event.target.process.command_line = /REG_DWORD/ nocase and
        $event.target.process.command_line = / \/f/ nocase and
        (($event.target.process.command_line = /Licensing Core/ nocase and
        $event.target.process.command_line = /EnableConcurrentSessions/ nocase) or
        $event.target.process.command_line = /WinStations\\RDP-Tcp|MaxInstanceCount|fEnableWinStation|TSUserEnabled|TSEnabled|TSAppCompat|IdleWinStationPoolCount|TSAdvertise|AllowTSConnections|fSingleSessionPerUser|fDenyTSConnections/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_reg_windows_defender_tamper.yaral ###
rule suspicious_windows_defender_registry_key_tampering_via_reg.exe {
    meta:
        description = "Detects the usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection"
        references = "https://thedfirreport.com/2022/03/21/apt35-automates-initial-access-using-proxyshell/, https://github.com/swagkarna/Defeat-Defender-V1.2.0, https://www.elevenforum.com/t/video-guide-how-to-completely-disable-microsoft-defender-antivirus.14608/page-2"
        mitre = "attack.defense-evasion, attack.t1562.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\reg\.exe$/ nocase or
        $event.target.process.file.names = "reg.exe" nocase) and
        $event.target.process.command_line = /SOFTWARE\\Microsoft\\Windows Defender\\|SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center|SOFTWARE\\Policies\\Microsoft\\Windows Defender\\/ nocase and
        (($event.target.process.command_line = / add / nocase and
        $event.target.process.command_line = /d 0/ nocase and
        $event.target.process.command_line = /DisallowExploitProtectionOverride|EnableControlledFolderAccess|MpEnablePus|PUAProtection|SpynetReporting|SubmitSamplesConsent|TamperProtection/ nocase) or
        ($event.target.process.command_line = / add / nocase and
        $event.target.process.command_line = /d 1/ nocase and
        $event.target.process.command_line = /DisableAntiSpyware|DisableAntiSpywareRealtimeProtection|DisableAntiVirus|DisableArchiveScanning|DisableBehaviorMonitoring|DisableBlockAtFirstSeen|DisableConfig|DisableEnhancedNotifications|DisableIntrusionPreventionSystem|DisableIOAVProtection|DisableOnAccessProtection|DisablePrivacyMode|DisableRealtimeMonitoring|DisableRoutinelyTakingAction|DisableScanOnRealtimeEnable|DisableScriptScanning|Notification_Suppress|SignatureDisableUpdateOnStartupWithoutEngine/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_registry_cimprovider_dll_load.yaral ###
rule dll_execution_via_register-cimprovider.exe {
    meta:
        description = "Detects using register-cimprovider.exe to execute arbitrary dll file."
        references = "https://twitter.com/PhilipTsukerman/status/992021361106268161, https://lolbas-project.github.io/lolbas/Binaries/Register-cimprovider/"
        mitre = "attack.defense-evasion, attack.t1574"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\register-cimprovider\.exe$/ nocase and
        $event.target.process.command_line = /-path/ nocase and
        $event.target.process.command_line = /dll/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_registry_ie_security_zone_protocol_defaults_downgrade.yaral ###
rule ie_zonemap_setting_downgraded_to_mycomputer_zone_for_http_protocols_via_cli {
    meta:
        description = "Detects changes to Internet Explorer's (IE / Windows Internet properties) ZoneMap configuration of the \"HTTP\" and \"HTTPS\" protocols to point to the \"My Computer\" zone. This allows downloaded files from the Internet to be granted the same level of trust as files stored locally.
"
        references = "https://twitter.com/M_haggis/status/1699056847154725107, https://twitter.com/JAMESWT_MHT/status/1699042827261391247, https://learn.microsoft.com/en-us/troubleshoot/developer/browsers/security-privacy/ie-security-zones-registry-entries, https://www.virustotal.com/gui/file/339ff720c74dc44265b917b6d3e3ba0411d61f3cd3c328e9a2bae81592c8a6e5/content"
        mitre = "attack.execution, attack.defense-evasion"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults/ nocase and
        $event.target.process.command_line = /http/ nocase and
        $event.target.process.command_line = / 0/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_registry_logon_script.yaral ###
rule potential_persistence_via_logon_scripts_-_commandline {
    meta:
        description = "Detects the addition of a new LogonScript to the registry value \"UserInitMprLogonScript\" for potential persistence"
        references = "https://cocomelonc.github.io/persistence/2022/12/09/malware-pers-20.html"
        mitre = "attack.persistence, attack.t1037.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /UserInitMprLogonScript/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_regsvr32_network_pattern.yaral ###
rule potentially_suspicious_regsvr32_http/ftp_pattern {
    meta:
        description = "Detects regsvr32 execution to download/install/register new DLLs that are hosted on Web or FTP servers."
        references = "https://twitter.com/mrd0x/status/1461041276514623491, https://twitter.com/tccontre18/status/1480950986650832903, https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/"
        mitre = "attack.defense-evasion, attack.t1218.010"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\regsvr32\.exe$/ nocase or
        $event.target.process.file.names = "REGSVR32.EXE" nocase) and
        $event.target.process.command_line = / \/i| -i/ nocase and
        $event.target.process.command_line = /ftp|http/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_regsvr32_susp_parent.yaral ###
rule scripting/commandline_process_spawned_regsvr32 {
    meta:
        description = "Detects various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance."
        references = "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html, https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad/"
        mitre = "attack.defense-evasion, attack.t1218.010"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.principal.process.file.full_path = /\\cmd\.exe|\\cscript\.exe|\\mshta\.exe|\\powershell_ise\.exe|\\powershell\.exe|\\pwsh\.exe|\\wscript\.exe/ nocase and
        $event.target.process.file.full_path = /\\regsvr32\.exe$/ nocase and
        $event.principal.process.file.full_path = "C:\\Windows\\System32\\cmd.exe" nocase and
        $event.target.process.command_line = / \/s C:\\Windows\\System32\\RpcProxy\\RpcProxy\.dll$/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_renamed_sysinternals_procdump.yaral ###
rule renamed_procdump_execution {
    meta:
        description = "Detects the execution of a renamed ProcDump executable.
This often done by attackers or malware in order to evade defensive mechanisms.
"
        references = "https://learn.microsoft.com/en-us/sysinternals/downloads/procdump"
        mitre = "attack.defense-evasion, attack.t1036.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "procdump" nocase or
        (($event.target.process.command_line = / -ma / nocase or
        $event.target.process.command_line = / \/ma / nocase or
        $event.target.process.command_line = / –ma / nocase or
        $event.target.process.command_line = / —ma / nocase or
        $event.target.process.command_line = / ―ma / nocase or
        $event.target.process.command_line = / -mp / nocase or
        $event.target.process.command_line = / \/mp / nocase or
        $event.target.process.command_line = / –mp / nocase or
        $event.target.process.command_line = / —mp / nocase or
        $event.target.process.command_line = / ―mp / nocase) and
        $event.target.process.command_line = / -accepteula/ nocase or
        $event.target.process.command_line = / \/accepteula/ nocase or
        $event.target.process.command_line = / –accepteula/ nocase or
        $event.target.process.command_line = / —accepteula/ nocase or
        $event.target.process.command_line = / ―accepteula/ nocase)) and
        ($event.target.process.file.full_path != /\\procdump\.exe/ nocase and
        $event.target.process.file.full_path != /\\procdump64\.exe/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_rpcping_credential_capture.yaral ###
rule capture_credentials_with_rpcping.exe {
    meta:
        description = "Detects using Rpcping.exe to send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process."
        references = "https://lolbas-project.github.io/lolbas/Binaries/Rpcping/, https://twitter.com/vysecurity/status/974806438316072960, https://twitter.com/vysecurity/status/873181705024266241, https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh875578(v=ws.11)"
        mitre = "attack.credential-access, attack.t1003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\rpcping\.exe$/ nocase and
        $event.target.process.command_line = /-s/ nocase or
        $event.target.process.command_line = /\/s/ nocase or
        $event.target.process.command_line = /–s/ nocase or
        $event.target.process.command_line = /—s/ nocase or
        $event.target.process.command_line = /―s/ nocase and
        (($event.target.process.command_line = /-u/ nocase or
        $event.target.process.command_line = /\/u/ nocase or
        $event.target.process.command_line = /–u/ nocase or
        $event.target.process.command_line = /—u/ nocase or
        $event.target.process.command_line = /―u/ nocase and
        $event.target.process.command_line = /NTLM/ nocase) or
        ($event.target.process.command_line = /-t/ nocase or
        $event.target.process.command_line = /\/t/ nocase or
        $event.target.process.command_line = /–t/ nocase or
        $event.target.process.command_line = /—t/ nocase or
        $event.target.process.command_line = /―t/ nocase and
        $event.target.process.command_line = /ncacn_np/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_rundll32_by_ordinal.yaral ###
rule dll_call_by_ordinal_via_rundll32.exe {
    meta:
        description = "Detects calls of DLLs exports by ordinal numbers via rundll32.dll."
        references = "https://web.archive.org/web/20200530031906/https://techtalk.pcmatic.com/2017/11/30/running-dll-files-malware-analysis/, https://github.com/Neo23x0/DLLRunner, https://twitter.com/cyb3rops/status/1186631731543236608, https://www.welivesecurity.com/2022/03/01/isaacwiper-hermeticwizard-wiper-worm-targeting-ukraine/"
        mitre = "attack.defense-evasion, attack.t1218.011, detection.threat-hunting"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\rundll32\.exe$/ nocase or
        $event.target.process.file.names = "RUNDLL32.EXE" nocase) and
        $event.target.process.command_line = /,#|, #|\.dll #|\.ocx #/ nocase and
        (($event.target.process.command_line = /EDGEHTML\.dll/ nocase and
        $event.target.process.command_line = /#141/ nocase) or
        ($event.principal.process.file.full_path = /\\Msbuild\\Current\\Bin\\|\\VC\\Tools\\MSVC\\|\\Tracker\.exe/ nocase and
        $event.target.process.command_line = /\\FileTracker32\.dll,#1|\\FileTracker32\.dll",#1|\\FileTracker64\.dll,#1|\\FileTracker64\.dll",#1/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_rundll32_mshtml_runhtmlapplication.yaral ###
rule mshtml.dll_runhtmlapplication_suspicious_usage {
    meta:
        description = "Detects execution of commands that leverage the \"mshtml.dll\" RunHTMLApplication export to run arbitrary code via different protocol handlers (vbscript, javascript, file, http...)
"
        references = "https://twitter.com/n1nj4sec/status/1421190238081277959, https://hyp3rlinx.altervista.org/advisories/MICROSOFT_WINDOWS_DEFENDER_TROJAN.WIN32.POWESSERE.G_MITIGATION_BYPASS_PART2.txt, http://hyp3rlinx.altervista.org/advisories/MICROSOFT_WINDOWS_DEFENDER_DETECTION_BYPASS.txt"
        mitre = "attack.defense-evasion, attack.execution"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /\\\.\.\\/ nocase and
        $event.target.process.command_line = /mshtml/ nocase and
        $event.target.process.command_line = /#135|RunHTMLApplication/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_rundll32_process_dump_via_comsvcs.yaral ###
rule process_memory_dump_via_comsvcs.dll {
    meta:
        description = "Detects a process memory dump via \"comsvcs.dll\" using rundll32, covering multiple different techniques (ordinal, minidump function, etc.)"
        references = "https://twitter.com/shantanukhande/status/1229348874298388484, https://twitter.com/pythonresponder/status/1385064506049630211?s=21, https://twitter.com/Hexacorn/status/1224848930795552769, https://modexp.wordpress.com/2019/08/30/minidumpwritedump-via-com-services-dll/, https://twitter.com/SBousseaden/status/1167417096374050817, https://twitter.com/Wietze/status/1542107456507203586, https://github.com/Hackndo/lsassy/blob/14d8f8ae596ecf22b449bfe919829173b8a07635/lsassy/dumpmethod/comsvcs.py"
        mitre = "attack.defense-evasion, attack.credential-access, attack.t1036, attack.t1003.001, car.2013-05-009"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.file.full_path = /\\rundll32\.exe$/ nocase or
        $event.target.process.file.names = "RUNDLL32.EXE" nocase or
        $event.target.process.command_line = /rundll32/ nocase) and
        $event.target.process.command_line = /comsvcs/ nocase and
        $event.target.process.command_line = /full/ nocase and
        $event.target.process.command_line = /#-|#\+|#24|24 |MiniDump/ nocase) or
        ($event.target.process.command_line = /24/ nocase and
        $event.target.process.command_line = /comsvcs/ nocase and
        $event.target.process.command_line = /full/ nocase and
        $event.target.process.command_line = / #|,#|, #/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_sc_create_service.yaral ###
rule new_service_creation_using_sc.exe {
    meta:
        description = "Detects the creation of a new service using the \"sc.exe\" utility."
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md"
        mitre = "attack.persistence, attack.privilege-escalation, attack.t1543.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\sc\.exe$/ nocase and
        $event.target.process.command_line = /create/ nocase and
        $event.target.process.command_line = /binPath/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_sc_disable_service.yaral ###
rule service_startuptype_change_via_sc.exe {
    meta:
        description = "Detect the use of \"sc.exe\" to change the startup type of a service to \"disabled\" or \"demand\""
        references = "https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955"
        mitre = "attack.execution, attack.defense-evasion, attack.t1562.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\sc\.exe$/ nocase or
        $event.target.process.file.names = "sc.exe" nocase) and
        $event.target.process.command_line = / config / nocase and
        $event.target.process.command_line = /start/ nocase and
        $event.target.process.command_line = /disabled|demand/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_sc_sdset_allow_service_changes.yaral ###
rule allow_service_access_using_security_descriptor_tampering_via_sc.exe {
    meta:
        description = "Detects suspicious DACL modifications to allow access to a service from a suspicious trustee. This can be used to override access restrictions set by previous ACLs."
        references = "https://twitter.com/0gtweet/status/1628720819537936386, https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/, https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings"
        mitre = "attack.persistence, attack.t1543.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\sc\.exe$/ nocase or
        $event.target.process.file.names = "sc.exe" nocase) and
        $event.target.process.command_line = /sdset/ nocase and
        $event.target.process.command_line = /A;/ nocase and
        $event.target.process.command_line = /;IU|;SU|;BA|;SY|;WD/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_sc_sdset_deny_service_access.yaral ###
rule deny_service_access_using_security_descriptor_tampering_via_sc.exe {
    meta:
        description = "Detects suspicious DACL modifications to deny access to a service that affects critical trustees. This can be used to hide services or make them unstoppable."
        references = "https://www.sans.org/blog/red-team-tactics-hiding-windows-services/, https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/, https://learn.microsoft.com/en-us/windows/win32/secauthz/sid-strings"
        mitre = "attack.persistence, attack.t1543.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\sc\.exe$/ nocase or
        $event.target.process.file.names = "sc.exe" nocase) and
        $event.target.process.command_line = /sdset/ nocase and
        $event.target.process.command_line = /D;/ nocase and
        $event.target.process.command_line = /;IU|;SU|;BA|;SY|;WD/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_sc_sdset_modification.yaral ###
rule service_security_descriptor_tampering_via_sc.exe {
    meta:
        description = "Detection of sc.exe utility adding a new service with special permission which hides that service."
        references = "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html, https://www.sans.org/blog/red-team-tactics-hiding-windows-services/, https://twitter.com/Alh4zr3d/status/1580925761996828672, https://twitter.com/0gtweet/status/1628720819537936386, https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/"
        mitre = "attack.persistence, attack.defense-evasion, attack.privilege-escalation, attack.t1574.011"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\sc\.exe$/ nocase or
        $event.target.process.file.names = "sc.exe" nocase) and
        $event.target.process.command_line = /sdset/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_sc_stop_service.yaral ###
rule stop_windows_service_via_sc.exe {
    meta:
        description = "Detects the stopping of a Windows service via the \"sc.exe\" utility"
        references = "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc742107(v=ws.11)"
        mitre = "attack.impact, attack.t1489"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "sc.exe" nocase or
        $event.target.process.file.full_path = /\\sc\.exe$/ nocase) and
        $event.target.process.command_line = / stop / nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_schtasks_creation.yaral ###
rule scheduled_task_creation_via_schtasks.exe {
    meta:
        description = "Detects the creation of scheduled tasks by user accounts via the \"schtasks\" utility."
        references = "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create"
        mitre = "attack.execution, attack.persistence, attack.privilege-escalation, attack.t1053.005, attack.s0111, car.2013-08-001, stp.1u"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\schtasks\.exe$/ nocase and
        $event.target.process.command_line = / \/create / nocase and
        ($event.target.user.userid != /AUTHORI/ nocase and
        $event.target.user.userid != /AUTORI/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_schtasks_env_folder.yaral ###
rule schedule_task_creation_from_env_variable_or_potentially_suspicious_path_via_schtasks.exe {
    meta:
        description = "Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware"
        references = "https://www.welivesecurity.com/2022/01/18/donot-go-do-not-respawn/, https://www.joesandbox.com/analysis/514608/0/html#324415FF7D8324231381BAD48A052F85DF04, https://blog.talosintelligence.com/gophish-powerrat-dcrat/"
        mitre = "attack.execution, attack.t1053.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.file.full_path = /\\schtasks\.exe$/ nocase and
        $event.target.process.command_line = / \/create / nocase and
        $event.target.process.command_line = /:\\Perflogs|:\\Users\\All Users\\|:\\Users\\Default\\|:\\Users\\Public|:\\Windows\\Temp|\\AppData\\Local\\|\\AppData\\Roaming\\|%AppData%|%Public%/ nocase) or
        ($event.principal.process.command_line = /\\svchost\.exe -k netsvcs -p -s Schedule$/ nocase and
        $event.target.process.command_line = /:\\Perflogs|:\\Windows\\Temp|\\Users\\Public|%Public%/ nocase)) and
        (($event.principal.process.command_line = /unattended\.ini/ nocase or
        $event.target.process.command_line = /update_task\.xml/ nocase) or
        $event.target.process.command_line != /\/Create \/TN TVInstallRestore \/TR/ nocase or
        ($event.target.process.command_line = /\/Create \/Xml "C:\\Users\\/ nocase and
        $event.target.process.command_line = /\\AppData\\Local\\Temp\\\.CR\./ nocase and
        $event.target.process.command_line = /Avira_Security_Installation\.xml/ nocase) or
        ($event.target.process.command_line = /\/Create \/F \/TN/ nocase and
        $event.target.process.command_line = /\/Xml / nocase and
        $event.target.process.command_line = /\\AppData\\Local\\Temp\\is-/ nocase and
        $event.target.process.command_line = /Avira_/ nocase and
        $event.target.process.command_line = /\.tmp\\UpdateFallbackTask\.xml|\.tmp\\WatchdogServiceControlManagerTimeout\.xml|\.tmp\\SystrayAutostart\.xml|\.tmp\\MaintenanceTask\.xml/ nocase) or
        ($event.target.process.command_line = /\\AppData\\Local\\Temp\\/ nocase and
        $event.target.process.command_line = /\/Create \/TN "klcp_update" \/XML / nocase and
        $event.target.process.command_line = /\\klcp_update_task\.xml/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_schtasks_system.yaral ###
rule schtasks_creation_or_modification_with_system_privileges {
    meta:
        description = "Detects the creation or update of a scheduled task to run with \"NT AUTHORITY\SYSTEM\" privileges"
        references = "https://www.elastic.co/security-labs/exploring-the-qbot-attack-pattern, https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks"
        mitre = "attack.execution, attack.persistence, attack.t1053.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\schtasks\.exe$/ nocase and
        $event.target.process.command_line = / \/change | \/create / nocase and
        $event.target.process.command_line = /\/ru / nocase and
        $event.target.process.command_line = /NT AUT| SYSTEM / nocase and
        (($event.target.process.file.full_path = /\\schtasks\.exe$/ nocase and
        $event.target.process.command_line = /\/TN TVInstallRestore/ nocase and
        $event.target.process.command_line = /\\TeamViewer_\.exe/ nocase) or
        ($event.target.process.command_line != /\/Create \/F \/RU System \/SC WEEKLY \/TN AviraSystemSpeedupVerify \/TR / nocase and
        $event.target.process.command_line != /:\\Program Files \(x86\)\\Avira\\System Speedup\\setup\\avira_speedup_setup\.exe/ nocase and
        $event.target.process.command_line != /\/VERIFY \/VERYSILENT \/NOSTART \/NODOTNET \/NORESTART" \/RL HIGHEST/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_sdbinst_shim_persistence.yaral ###
rule potential_shim_database_persistence_via_sdbinst.exe {
    meta:
        description = "Detects installation of a new shim using sdbinst.exe.
Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims
"
        references = "https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence"
        mitre = "attack.persistence, attack.privilege-escalation, attack.t1546.011"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\sdbinst\.exe$/ nocase or
        $event.target.process.file.names = "sdbinst.exe" nocase) and
        $event.target.process.command_line = /\.sdb/ nocase and
        $event.principal.process.file.full_path = /\\msiexec\.exe$/ nocase and
        $event.target.process.command_line = /:\\Program Files \(x86\)\\IIS Express\\iisexpressshim\.sdb|:\\Program Files\\IIS Express\\iisexpressshim\.sdb/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_copy_browser_data.yaral ###
rule potential_browser_data_stealing {
    meta:
        description = "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.
Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future.
Web browsers typically store the credentials in an encrypted format within a credential store.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1555.003/T1555.003.md"
        mitre = "attack.credential-access, attack.t1555.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.command_line = /copy-item|copy |cpi | cp |move |move-item| mi | mv / nocase or
        $event.target.process.file.full_path = /\\xcopy\.exe|\\robocopy\.exe/ nocase or
        $event.target.process.file.names = /XCOPY.EXE|robocopy.exe/ nocase) and
        $event.target.process.command_line = /\\Amigo\\User Data|\\BraveSoftware\\Brave-Browser\\User Data|\\CentBrowser\\User Data|\\Chromium\\User Data|\\CocCoc\\Browser\\User Data|\\Comodo\\Dragon\\User Data|\\Elements Browser\\User Data|\\Epic Privacy Browser\\User Data|\\Google\\Chrome Beta\\User Data|\\Google\\Chrome SxS\\User Data|\\Google\\Chrome\\User Data\\|\\Kometa\\User Data|\\Maxthon5\\Users|\\Microsoft\\Edge\\User Data|\\Mozilla\\Firefox\\Profiles|\\Nichrome\\User Data|\\Opera Software\\Opera GX Stable\\|\\Opera Software\\Opera Neon\\User Data|\\Opera Software\\Opera Stable\\|\\Orbitum\\User Data|\\QIP Surf\\User Data|\\Sputnik\\User Data|\\Torch\\User Data|\\uCozMedia\\Uran\\User Data|\\Vivaldi\\User Data/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_copy_system_dir.yaral ###
rule suspicious_copy_from_or_to_system_directory {
    meta:
        description = "Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.
Often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.
"
        references = "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120, https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html, https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
        mitre = "attack.defense-evasion, attack.t1036.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.file.full_path = /\\cmd\.exe$/ nocase and
        $event.target.process.command_line = /copy / nocase) or
        ($event.target.process.file.full_path = /\\powershell\.exe|\\pwsh\.exe/ nocase and
        $event.target.process.command_line = /copy-item| copy |cpi | cp / nocase) or
        ($event.target.process.file.full_path = /\\robocopy\.exe|\\xcopy\.exe/ nocase or
        $event.target.process.file.names = /robocopy.exe|XCOPY.EXE/ nocase)) and
        $event.target.process.command_line = /\\System32|\\SysWOW64|\\WinSxS/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_copy_system_dir_lolbin.yaral ###
rule lol-binary_copied_from_system_directory {
    meta:
        description = "Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.
"
        references = "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120, https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html, https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
        mitre = "attack.defense-evasion, attack.t1036.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.file.full_path = /\\cmd\.exe$/ nocase and
        $event.target.process.command_line = /copy / nocase) or
        ($event.target.process.file.full_path = /\\powershell\.exe|\\pwsh\.exe/ nocase and
        $event.target.process.command_line = /copy-item| copy |cpi | cp / nocase) or
        ($event.target.process.file.full_path = /\\robocopy\.exe|\\xcopy\.exe/ nocase or
        $event.target.process.file.names = /robocopy.exe|XCOPY.EXE/ nocase)) and
        $event.target.process.command_line = /\\System32|\\SysWOW64|\\WinSxS/ nocase and
        $event.target.process.command_line = /\\bitsadmin\.exe|\\calc\.exe|\\certutil\.exe|\\cmdl32\.exe|\\cscript\.exe|\\mshta\.exe|\\rundll32\.exe|\\wscript\.exe/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_eventlog_clear.yaral ###
rule suspicious_eventlog_clearing_or_configuration_change_activity {
    meta:
        description = "Detects the clearing or configuration tampering of EventLog using utilities such as \"wevtutil\", \"powershell\" and \"wmic\".
This technique were seen used by threat actors and ransomware strains in order to evade defenses.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1070.001/T1070.001.md, https://eqllib.readthedocs.io/en/latest/analytics/5b223758-07d6-4100-9e11-238cfdd0fe97.html, https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil, https://gist.github.com/fovtran/ac0624983c7722e80a8f5a4babb170ee, https://jdhnet.wordpress.com/2017/12/19/changing-the-location-of-the-windows-event-logs/"
        mitre = "attack.defense-evasion, attack.t1070.001, attack.t1562.002, car.2016-04-002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.file.full_path = /\\wevtutil\.exe$/ nocase and
        $event.target.process.command_line = /clear-log | cl |set-log | sl |lfn:/ nocase) or
        ($event.target.process.file.full_path = /\\powershell\.exe|\\pwsh\.exe/ nocase and
        $event.target.process.command_line = /Clear-EventLog |Remove-EventLog |Limit-EventLog |Clear-WinEvent / nocase) or
        ($event.target.process.file.full_path = /\\powershell\.exe|\\pwsh\.exe|\\wmic\.exe/ nocase and
        $event.target.process.command_line = /ClearEventLog/ nocase)) and
        $event.principal.process.file.full_path = /C:\\Windows\\SysWOW64\\msiexec.exe|C:\\Windows\\System32\\msiexec.exe/ nocase and
        $event.target.process.command_line = / sl / nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_gather_network_info_execution.yaral ###
rule suspicious_reconnaissance_activity_via_gathernetworkinfo.vbs {
    meta:
        description = "Detects execution of the built-in script located in \"C:\Windows\System32\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine"
        references = "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs, https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government"
        mitre = "attack.discovery, attack.execution, attack.t1615, attack.t1059.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /gatherNetworkInfo\.vbs/ nocase and
        ($event.target.process.file.full_path != /\\cscript\.exe/ nocase and
        $event.target.process.file.full_path != /\\wscript\.exe/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_lsass_dmp_cli_keywords.yaral ###
rule lsass_dump_keyword_in_commandline {
    meta:
        description = "Detects the presence of the keywords \"lsass\" and \".dmp\" in the commandline, which could indicate a potential attempt to dump or create a dump of the lsass process.
"
        references = "https://github.com/Hackndo/lsassy, https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf, https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/credential_access_lsass_memdump_file_created.toml, https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/, https://github.com/helpsystems/nanodump, https://github.com/CCob/MirrorDump"
        mitre = "attack.credential-access, attack.t1003.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.command_line = /lsass\.dmp|lsass\.zip|lsass\.rar|Andrew\.dmp|Coredump\.dmp|NotLSASS\.zip|lsass_2|lsassdump|lsassdmp/ nocase or
        ($event.target.process.command_line = /lsass/ nocase and
        $event.target.process.command_line = /\.dmp/ nocase) or
        ($event.target.process.command_line = /SQLDmpr/ nocase and
        $event.target.process.command_line = /\.mdmp/ nocase) or
        ($event.target.process.command_line = /nanodump/ nocase and
        $event.target.process.command_line = /\.dmp/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_ntds.yaral ###
rule suspicious_process_patterns_ntds.dit_exfil {
    meta:
        description = "Detects suspicious process patterns used in NTDS.DIT exfiltration"
        references = "https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration, https://www.n00py.io/2022/03/manipulating-user-passwords-without-mimikatz/, https://pentestlab.blog/tag/ntds-dit/, https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Gather/Copy-VSS.ps1, https://github.com/zcgonvh/NTDSDumpEx, https://github.com/rapid7/metasploit-framework/blob/d297adcebb5c1df6fe30b12ca79b161deb71571c/data/post/powershell/NTDSgrab.ps1, https://blog.talosintelligence.com/2022/08/recent-cyber-attack.html?m=1"
        mitre = "attack.credential-access, attack.t1003.003"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.file.full_path = /\\NTDSDump\.exe|\\NTDSDumpEx\.exe/ nocase or
        ($event.target.process.command_line = /ntds\.dit/ nocase and
        $event.target.process.command_line = /system\.hiv/ nocase) or
        $event.target.process.command_line = /NTDSgrab\.ps1/ nocase) or
        ($event.target.process.command_line = /ac i ntds/ nocase and
        $event.target.process.command_line = /create full/ nocase) or
        ($event.target.process.command_line = /\/c copy / nocase and
        $event.target.process.command_line = /\\windows\\ntds\\ntds\.dit/ nocase) or
        ($event.target.process.command_line = /activate instance ntds/ nocase and
        $event.target.process.command_line = /create full/ nocase) or
        ($event.target.process.command_line = /powershell/ nocase and
        $event.target.process.command_line = /ntds\.dit/ nocase)) or
        ($event.target.process.command_line = /ntds\.dit/ nocase and
        ($event.principal.process.file.full_path = /\\apache|\\tomcat|\\AppData\\|\\Temp\\|\\Public\\|\\PerfLogs\\/ nocase or
        $event.target.process.file.full_path = /\\apache|\\tomcat|\\AppData\\|\\Temp\\|\\Public\\|\\PerfLogs\\/ nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_sensitive_file_access_shadowcopy.yaral ###
rule sensitive_file_access_via_volume_shadow_copy_backup {
    meta:
        description = "Detects a command that accesses the VolumeShadowCopy in order to extract sensitive files such as the Security or SAM registry hives or the AD database (ntds.dit)
"
        references = "https://twitter.com/vxunderground/status/1423336151860002816?s=20, https://www.virustotal.com/gui/file/03e9b8c2e86d6db450e5eceec057d7e369ee2389b9daecaf06331a95410aa5f8/detection, https://pentestlab.blog/2018/07/04/dumping-domain-password-hashes/"
        mitre = "attack.impact, attack.t1490"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /\\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy/ nocase and
        $event.target.process.command_line = /\\NTDS\.dit|\\SYSTEM|\\SECURITY/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_service_tamper.yaral ###
rule suspicious_windows_service_tampering {
    meta:
        description = "Detects the usage of binaries such as 'net', 'sc' or 'powershell' in order to stop, pause, disable or delete critical or important Windows services such as AV, Backup, etc. As seen being used in some ransomware scripts
"
        references = "https://www.trendmicro.com/content/dam/trendmicro/global/en/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus/Genshin%20Impact%20Figure%2010.jpg, https://www.trellix.com/en-sg/about/newsroom/stories/threat-labs/lockergoga-ransomware-family-used-in-targeted-attacks.html, https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md, https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/, https://www.virustotal.com/gui/file/38283b775552da8981452941ea74191aa0d203edd3f61fb2dee7b0aea3514955"
        mitre = "attack.defense-evasion, attack.t1489, attack.t1562.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = /net.exe|net1.exe|PowerShell.EXE|psservice.exe|pwsh.dll|sc.exe/ nocase or
        $event.target.process.file.full_path = /\\net\.exe|\\net1\.exe|\\powershell\.exe|\\PsService\.exe|\\PsService64\.exe|\\pwsh\.exe|\\sc\.exe/ nocase) and
        ($event.target.process.command_line = / delete | pause | stop |Stop-Service |Remove-Service / nocase or
        ($event.target.process.command_line = /config/ nocase and
        $event.target.process.command_line = /start=disabled/ nocase)) and
        $event.target.process.command_line = /143Svc|Acronis VSS Provider|AcronisAgent|AcrSch2Svc|AdobeARMservice|AHS Service|Antivirus|Apache4|ARSM|aswBcc|AteraAgent|Avast Business Console Client Antivirus Service|avast! Antivirus|AVG Antivirus|avgAdminClient|AvgAdminServer|AVP1|BackupExec|bedbg|BITS|BrokerInfrastructure|CASLicenceServer|CASWebServer|Client Agent 7\.60|Core Browsing Protection|Core Mail Protection|Core Scanning Server|DCAgent|dwmrcs|EhttpSr|ekrn|Enterprise Client Service|epag|EPIntegrationService|EPProtectedService|EPRedline|EPSecurityService|EPUpdateService|EraserSvc11710|EsgShKernel|ESHASRV|FA_Scheduler|FirebirdGuardianDefaultInstance|FirebirdServerDefaultInstance|FontCache3\.0\.0\.0|HealthTLService|hmpalertsvc|HMS|HostControllerService|hvdsvc|IAStorDataMgrSvc|IBMHPS|ibmspsvc|IISAdmin|IMANSVC|IMAP4Svc|instance2|KAVFS|KAVFSGT|kavfsslp|KeyIso|klbackupdisk|klbackupflt|klflt|klhk|KLIF|klim6|klkbdflt|klmouflt|klnagent|klpd|kltap|KSDE1\.0\.0|LogProcessorService|M8EndpointAgent|macmnsvc|masvc|MBAMService|MBCloudEA|MBEndpointAgent|McAfeeDLPAgentService|McAfeeEngineService|MCAFEEEVENTPARSERSRV|McAfeeFramework|MCAFEETOMCATSRV530|McShield|McTaskManager|mfefire|mfemms|mfevto|mfevtp|mfewc|MMS|mozyprobackup|mpssvc|MSComplianceAudit|MSDTC|MsDtsServer|MSExchange|msftesq1SPROO|msftesql\$PROD|msftesql\$SQLEXPRESS|MSOLAP\$SQL_2008|MSOLAP\$SYSTEM_BGC|MSOLAP\$TPS|MSOLAP\$TPSAMA|MSOLAPSTPS|MSOLAPSTPSAMA|mssecflt|MSSQ!I\.SPROFXENGAGEMEHT|MSSQ0SHAREPOINT|MSSQ0SOPHOS|MSSQL|MSSQLFDLauncher\$|MySQL|NanoServiceMain|NetMsmqActivator|NetPipeActivator|netprofm|NetTcpActivator|NetTcpPortSharing|ntrtscan|nvspwmi|ofcservice|Online Protection System|OracleClientCache80|OracleDBConsole|OracleMTSRecoveryService|OracleOraDb11g_home1|OracleService|OracleVssWriter|osppsvc|PandaAetherAgent|PccNTUpd|PDVFSService|POP3Svc|postgresql-x64-9\.4|POVFSService|PSUAService|Quick Update Service|RepairService|ReportServer|ReportServer\$|RESvc|RpcEptMapper|sacsvr|SamSs|SAVAdminService|SAVService|ScSecSvc|SDRSVC|SearchExchangeTracing|sense|SentinelAgent|SentinelHelperService|SepMasterService|ShMonitor|Smcinst|SmcService|SMTPSvc|SNAC|SntpService|Sophos|SQ1SafeOLRService|SQL Backups|SQL Server|SQLAgent|SQLANYs_Sage_FAS_Fixed_Assets|SQLBrowser|SQLsafe|SQLSERVERAGENT|SQLTELEMETRY|SQLWriter|SSISTELEMETRY130|SstpSvc|storflt|svcGenericHost|swc_service|swi_filter|swi_service|swi_update|Symantec|sysmon|TeamViewer|Telemetryserver|ThreatLockerService|TMBMServer|TmCCSF|TmFilter|TMiCRCScanService|tmlisten|TMLWCSService|TmPfw|TmPreFilter|TmProxy|TMSmartRelayService|tmusa|Tomcat|Trend Micro Deep Security Manager|TrueKey|UFNet|UI0Detect|UniFi|UTODetect|vds|Veeam|VeeamDeploySvc|Veritas System Recovery|vmic|VMTools|vmvss|VSApiNt|VSS|W3Svc|wbengine|WdNisSvc|WeanClOudSve|Weems JY|WinDefend|wmms|wozyprobackup|WPFFontCache_v0400|WRSVC|wsbexchange|WSearch|wscsvc|Zoolz 2 Service/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_system_exe_anomaly.yaral ###
rule system_file_execution_location_anomaly {
    meta:
        description = "Detects the execution of a Windows system binary that is usually located in the system folder from an uncommon location.
"
        references = "https://twitter.com/GelosSnake/status/934900723426439170, https://asec.ahnlab.com/en/39828/"
        mitre = "attack.defense-evasion, attack.t1036"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\atbroker\.exe|\\audiodg\.exe|\\bcdedit\.exe|\\bitsadmin\.exe|\\certreq\.exe|\\certutil\.exe|\\cmstp\.exe|\\conhost\.exe|\\consent\.exe|\\cscript\.exe|\\csrss\.exe|\\dashost\.exe|\\defrag\.exe|\\dfrgui\.exe|\\dism\.exe|\\dllhost\.exe|\\dllhst3g\.exe|\\dwm\.exe|\\eventvwr\.exe|\\logonui\.exe|\\LsaIso\.exe|\\lsass\.exe|\\lsm\.exe|\\msiexec\.exe|\\ntoskrnl\.exe|\\powershell_ise\.exe|\\powershell\.exe|\\pwsh\.exe|\\regsvr32\.exe|\\rundll32\.exe|\\runonce\.exe|\\RuntimeBroker\.exe|\\schtasks\.exe|\\services\.exe|\\sihost\.exe|\\smartscreen\.exe|\\smss\.exe|\\spoolsv\.exe|\\svchost\.exe|\\taskhost\.exe|\\Taskmgr\.exe|\\userinit\.exe|\\wininit\.exe|\\winlogon\.exe|\\winver\.exe|\\wlanext\.exe|\\wscript\.exe|\\wsl\.exe|\\wsmprovhost\.exe/ nocase and
        (($event.target.process.file.full_path != /C:\\\$WINDOWS\.~BT\\/ nocase and
        $event.target.process.file.full_path != /C:\\\$WinREAgent\\/ nocase and
        $event.target.process.file.full_path != /C:\\Windows\\SoftwareDistribution\\/ nocase and
        $event.target.process.file.full_path != /C:\\Windows\\System32\\/ nocase and
        $event.target.process.file.full_path != /C:\\Windows\\SystemTemp\\/ nocase and
        $event.target.process.file.full_path != /C:\\Windows\\SysWOW64\\/ nocase and
        $event.target.process.file.full_path != /C:\\Windows\\uus\\/ nocase and
        $event.target.process.file.full_path != /C:\\Windows\\WinSxS\\/ nocase) or
        ($event.target.process.file.full_path != /C:\\Program Files\\PowerShell\\7\\pwsh.exe/ nocase and
        $event.target.process.file.full_path != /C:\\Program Files\\PowerShell\\7-preview\\pwsh.exe/ nocase) or
        ($event.target.process.file.full_path = /^C:\\Program Files\\WindowsApps\\MicrosoftCorporationII\.WindowsSubsystemForLinux/ nocase and
        $event.target.process.file.full_path = /\\wsl\.exe$/ nocase)) and
        $event.target.process.file.full_path != /\\SystemRoot\\System32\\/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_susp_weak_or_abused_passwords.yaral ###
rule weak_or_abused_passwords_in_cli {
    meta:
        description = "Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.
An example would be a threat actor creating a new user via the net command and providing the password inline
"
        references = "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments, https://thedfirreport.com/2022/09/26/bumblebee-round-two/, https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/, https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
        mitre = "attack.defense-evasion, attack.execution"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /123456789|123123qwE|Asd123\.aaaa|Decryptme|P@ssw0rd!|Pass8080|password123|test@202/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_svchost_masqueraded_execution.yaral ###
rule suspicious_process_masquerading_as_svchost.exe {
    meta:
        description = "Detects a suspicious process that is masquerading as the legitimate \"svchost.exe\" by naming its binary \"svchost.exe\" and executing from an uncommon location.
Adversaries often disguise their malicious binaries by naming them after legitimate system processes like \"svchost.exe\" to evade detection.
"
        references = "https://tria.ge/240731-jh4crsycnb/behavioral2, https://redcanary.com/blog/threat-detection/process-masquerading/"
        mitre = "attack.defense-evasion, attack.t1036.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\svchost\.exe$/ nocase and
        (($event.target.process.file.full_path != /C:\\Windows\\System32\\svchost.exe/ nocase and
        $event.target.process.file.full_path != /C:\\Windows\\SysWOW64\\svchost.exe/ nocase) or
        $event.target.process.file.names != "svchost.exe" nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_svchost_uncommon_parent_process.yaral ###
rule uncommon_svchost_parent_process {
    meta:
        description = "Detects an uncommon svchost parent process"
        references = "Internal Research"
        mitre = "attack.defense-evasion, attack.t1036.005"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\svchost\.exe$/ nocase and
        (($event.principal.process.file.full_path != /\\Mrt\.exe/ nocase and
        $event.principal.process.file.full_path != /\\MsMpEng\.exe/ nocase and
        $event.principal.process.file.full_path != /\\ngen\.exe/ nocase and
        $event.principal.process.file.full_path != /\\rpcnet\.exe/ nocase and
        $event.principal.process.file.full_path != /\\services\.exe/ nocase and
        $event.principal.process.file.full_path != /\\TiWorker\.exe/ nocase) or
        $event.principal.process.file.full_path = "" or
        ($event.principal.process.file.full_path != /-/ nocase and
        $event.principal.process.file.full_path != // nocase)))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_sysinternals_procdump_lsass.yaral ###
rule potential_lsass_process_dump_via_procdump {
    meta:
        description = "Detects suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process.
This way we are also able to catch cases in which the attacker has renamed the procdump executable.
"
        references = "https://learn.microsoft.com/en-us/sysinternals/downloads/procdump"
        mitre = "attack.defense-evasion, attack.t1036, attack.credential-access, attack.t1003.001, car.2013-05-009"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = / -ma / nocase or
        $event.target.process.command_line = / \/ma / nocase or
        $event.target.process.command_line = / –ma / nocase or
        $event.target.process.command_line = / —ma / nocase or
        $event.target.process.command_line = / ―ma / nocase and
        $event.target.process.command_line = / ls/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_taskkill_execution.yaral ###
rule process_terminated_via_taskkill {
    meta:
        description = "Detects execution of \"taskkill.exe\" in order to stop a service or a process. Look for suspicious parents executing this command in order to hunt for potential malicious activity.
Attackers might leverage this in order to conduct data destruction or data encrypted for impact on the data stores of services like Exchange and SQL Server.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1489/T1489.md#atomic-test-3---windows---stop-service-by-killing-process, https://unit42.paloaltonetworks.com/snipbot-romcom-malware-variant/"
        mitre = "attack.impact, attack.t1489, detection.threat-hunting"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\taskkill\.exe$/ nocase or
        $event.target.process.file.names = "taskkill.exe" nocase) and
        ($event.target.process.command_line = / -f / nocase or
        $event.target.process.command_line = / \/f / nocase or
        $event.target.process.command_line = / –f / nocase or
        $event.target.process.command_line = / —f / nocase or
        $event.target.process.command_line = / ―f / nocase or
        $event.target.process.command_line = / -f$/ nocase or
        $event.target.process.command_line = / \/f$/ nocase or
        $event.target.process.command_line = / –f$/ nocase or
        $event.target.process.command_line = / —f$/ nocase or
        $event.target.process.command_line = / ―f$/ nocase) and
        ($event.target.process.command_line = / -im / nocase or
        $event.target.process.command_line = / \/im / nocase or
        $event.target.process.command_line = / –im / nocase or
        $event.target.process.command_line = / —im / nocase or
        $event.target.process.command_line = / ―im / nocase or
        $event.target.process.command_line = / -pid / nocase or
        $event.target.process.command_line = / \/pid / nocase or
        $event.target.process.command_line = / –pid / nocase or
        $event.target.process.command_line = / —pid / nocase or
        $event.target.process.command_line = / ―pid / nocase) and
        $event.principal.process.file.full_path = /\\AppData\\Local\\Temp\\|:\\Windows\\Temp/ nocase and
        $event.principal.process.file.full_path = /\.tmp$/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_where_browser_data_recon.yaral ###
rule suspicious_where_execution {
    meta:
        description = "Adversaries may enumerate browser bookmarks to learn more about compromised hosts.
Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about
internal network resources such as servers, tools/dashboards, or other related infrastructure.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1217/T1217.md"
        mitre = "attack.discovery, attack.t1217"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\where\.exe$/ nocase or
        $event.target.process.file.names = "where.exe" nocase) and
        $event.target.process.command_line = /places\.sqlite|cookies\.sqlite|formhistory\.sqlite|logins\.json|key4\.db|key3\.db|sessionstore\.jsonlz4|History|Bookmarks|Cookies|Login Data/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_whoami_output.yaral ###
rule whoami.exe_execution_with_output_option {
    meta:
        description = "Detects the execution of \"whoami.exe\" with the \"/FO\" flag to choose CSV as output format or with redirection options to export the results to a file for later use."
        references = "https://brica.de/alerts/alert/public/1247926/agent-tesla-keylogger-delivered-inside-a-power-iso-daa-archive/, https://app.any.run/tasks/7eaba74e-c1ea-400f-9c17-5e30eee89906/, https://www.youtube.com/watch?v=DsJ9ByX84o4&t=6s"
        mitre = "attack.discovery, attack.t1033, car.2016-03-001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ((($event.target.process.file.full_path = /\\whoami\.exe$/ nocase or
        $event.target.process.file.names = "whoami.exe" nocase) and
        $event.target.process.command_line = / \/FO CSV| -FO CSV/ nocase) or
        $event.target.process.command_line = whoami.*> nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wlrmdr_uncommon_child_process.yaral ###
rule wlrmdr.exe_uncommon_argument_or_child_process {
    meta:
        description = "Detects the execution of \"Wlrmdr.exe\" with the \"-u\" command line flag which allows anything passed to it to be an argument of the ShellExecute API, which would allow an attacker to execute arbitrary binaries.
This detection also focuses on any uncommon child processes spawned from \"Wlrmdr.exe\" as a supplement for those that posses \"ParentImage\" telemetry.
"
        references = "https://twitter.com/0gtweet/status/1493963591745220608?s=20&t=xUg9DsZhJy1q9bPTUWgeIQ, https://lolbas-project.github.io/lolbas/Binaries/Wlrmdr/"
        mitre = "attack.defense-evasion, attack.t1218"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.principal.process.file.full_path = /\\wlrmdr\.exe$/ nocase or
        (($event.target.process.file.full_path = /\\wlrmdr\.exe$/ nocase or
        $event.target.process.file.names = "WLRMNDR.EXE" nocase) and
        $event.target.process.command_line = /-s / nocase or
        $event.target.process.command_line = /\/s / nocase or
        $event.target.process.command_line = /–s / nocase or
        $event.target.process.command_line = /—s / nocase or
        $event.target.process.command_line = /―s / nocase and
        $event.target.process.command_line = /-f / nocase or
        $event.target.process.command_line = /\/f / nocase or
        $event.target.process.command_line = /–f / nocase or
        $event.target.process.command_line = /—f / nocase or
        $event.target.process.command_line = /―f / nocase and
        $event.target.process.command_line = /-t / nocase or
        $event.target.process.command_line = /\/t / nocase or
        $event.target.process.command_line = /–t / nocase or
        $event.target.process.command_line = /—t / nocase or
        $event.target.process.command_line = /―t / nocase and
        $event.target.process.command_line = /-m / nocase or
        $event.target.process.command_line = /\/m / nocase or
        $event.target.process.command_line = /–m / nocase or
        $event.target.process.command_line = /—m / nocase or
        $event.target.process.command_line = /―m / nocase and
        $event.target.process.command_line = /-a / nocase or
        $event.target.process.command_line = /\/a / nocase or
        $event.target.process.command_line = /–a / nocase or
        $event.target.process.command_line = /—a / nocase or
        $event.target.process.command_line = /―a / nocase and
        $event.target.process.command_line = /-u / nocase or
        $event.target.process.command_line = /\/u / nocase or
        $event.target.process.command_line = /–u / nocase or
        $event.target.process.command_line = /—u / nocase or
        $event.target.process.command_line = /―u / nocase and
        ($event.principal.process.file.full_path != "C:\\Windows\\System32\\winlogon.exe" nocase or
        ($event.principal.process.file.full_path != // nocase and
        $event.principal.process.file.full_path != /-/ nocase) or
        $event.principal.process.file.full_path = "")))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_process_creation.yaral ###
rule new_process_created_via_wmic.exe {
    meta:
        description = "Detects new process creation using WMIC via the \"process call create\" flag"
        references = "https://www.sans.org/blog/wmic-for-incident-response/, https://github.com/redcanaryco/atomic-red-team/blob/84215139ee5127f8e3a117e063b604812bd71928/atomics/T1047/T1047.md#atomic-test-5---wmi-execute-local-process"
        mitre = "attack.execution, attack.t1047, car.2016-03-002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\wmic\.exe$/ nocase or
        $event.target.process.file.names = "wmic.exe" nocase) and
        $event.target.process.command_line = /process/ nocase and
        $event.target.process.command_line = /call/ nocase and
        $event.target.process.command_line = /create/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_recon_group.yaral ###
rule local_groups_reconnaissance_via_wmic.exe {
    meta:
        description = "Detects the execution of \"wmic\" with the \"group\" flag.
Adversaries may attempt to find local system groups and permission settings.
The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1069.001/T1069.001.md"
        mitre = "attack.discovery, attack.t1069.001"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\wmic\.exe$/ nocase or
        $event.target.process.file.names = "wmic.exe" nocase) and
        $event.target.process.command_line = / group/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_recon_hotfix.yaral ###
rule windows_hotfix_updates_reconnaissance_via_wmic.exe {
    meta:
        description = "Detects the execution of wmic with the \"qfe\" flag in order to obtain information about installed hotfix updates on the system. This is often used by pentester and attacker enumeration scripts"
        references = "https://github.com/carlospolop/PEASS-ng/blob/fa0f2e17fbc1d86f1fd66338a40e665e7182501d/winPEAS/winPEASbat/winPEAS.bat, https://sushant747.gitbooks.io/total-oscp-guide/content/privilege_escalation_windows.html"
        mitre = "attack.execution, attack.t1047"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = "wmic.exe" nocase or
        $event.target.process.file.full_path = /\\WMIC\.exe$/ nocase) and
        $event.target.process.command_line = / qfe/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_recon_process.yaral ###
rule process_reconnaissance_via_wmic.exe {
    meta:
        description = "Detects the execution of \"wmic\" with the \"process\" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches."
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md, https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic"
        mitre = "attack.execution, attack.t1047"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\WMIC\.exe$/ nocase or
        $event.target.process.file.names = "wmic.exe" nocase) and
        $event.target.process.command_line = /process/ nocase and
        $event.target.process.command_line = /call/ nocase and
        $event.target.process.command_line = /create/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_recon_product.yaral ###
rule potential_product_reconnaissance_via_wmic.exe {
    meta:
        description = "Detects the execution of WMIC in order to get a list of firewall and antivirus products"
        references = "https://thedfirreport.com/2023/03/06/2022-year-in-review/, https://www.yeahhub.com/list-installed-programs-version-path-windows/, https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product"
        mitre = "attack.execution, attack.t1047"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\wmic\.exe$/ nocase or
        $event.target.process.file.names = "wmic.exe" nocase) and
        $event.target.process.command_line = /Product/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_recon_product_class.yaral ###
rule potential_product_class_reconnaissance_via_wmic.exe {
    meta:
        description = "Detects the execution of WMIC in order to get a list of firewall and antivirus products"
        references = "https://github.com/albertzsigovits/malware-notes/blob/c820c7fea76cf76a861b28ebc77e06100e20ec29/Ransomware/Maze.md, https://www.hybrid-analysis.com/sample/4be06ecd234e2110bd615649fe4a6fa95403979acf889d7e45a78985eb50acf9?environmentId=1"
        mitre = "attack.execution, attack.t1047, car.2016-03-002"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\wmic\.exe$/ nocase or
        $event.target.process.file.names = "wmic.exe" nocase) and
        $event.target.process.command_line = /AntiVirusProduct|FirewallProduct/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_recon_service.yaral ###
rule service_reconnaissance_via_wmic.exe {
    meta:
        description = "An adversary might use WMI to check if a certain remote service is running on a remote device.
When the test completes, a service information will be displayed on the screen if it exists.
A common feedback message is that \"No instance(s) Available\" if the service queried is not running.
A common error message is \"Node - (provided IP or default) ERROR Description =The RPC server is unavailable\" if the provided remote host is unreachable
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md, https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic"
        mitre = "attack.execution, attack.t1047"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\WMIC\.exe$/ nocase or
        $event.target.process.file.names = "wmic.exe" nocase) and
        $event.target.process.command_line = /service/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_recon_volume.yaral ###
rule system_disk_and_volume_reconnaissance_via_wmic.exe {
    meta:
        description = "An adversary might use WMI to discover information about the system, such as the volume name, size,
free space, and other disk information. This can be done using the `wmic` command-line utility and has been
observed being used by threat actors such as Volt Typhoon.
"
        references = "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-144a, https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic"
        mitre = "attack.execution, attack.discovery, attack.t1047, attack.t1082"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\WMIC\.exe$/ nocase or
        $event.target.process.file.names = "wmic.exe" nocase) and
        $event.target.process.command_line = /volume|path win32_logicaldisk/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_susp_process_creation.yaral ###
rule suspicious_process_created_via_wmic.exe {
    meta:
        description = "Detects WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc."
        references = "https://thedfirreport.com/2020/10/08/ryuks-return/, https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker"
        mitre = "attack.execution, attack.t1047"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.command_line = /process / nocase and
        $event.target.process.command_line = /call / nocase and
        $event.target.process.command_line = /create / nocase and
        $event.target.process.command_line = /rundll32|bitsadmin|regsvr32|cmd\.exe \/c |cmd\.exe \/k |cmd\.exe \/r |cmd \/c |cmd \/k |cmd \/r |powershell|pwsh|certutil|cscript|wscript|mshta|\\Users\\Public\\|\\Windows\\Temp\\|\\AppData\\Local\\|%temp%|%tmp%|%ProgramData%|%appdata%|%comspec%|%localappdata%/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_uninstall_application.yaral ###
rule application_removed_via_wmic.exe {
    meta:
        description = "Detects the removal or uninstallation of an application via \"Wmic.EXE\"."
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md#atomic-test-10---application-uninstall-using-wmic"
        mitre = "attack.execution, attack.t1047"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\WMIC\.exe$/ nocase or
        $event.target.process.file.names = "wmic.exe" nocase) and
        $event.target.process.command_line = /call/ nocase and
        $event.target.process.command_line = /uninstall/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wmic_xsl_script_processing.yaral ###
rule xsl_script_execution_via_wmic.exe {
    meta:
        description = "Detects the execution of WMIC with the \"format\" flag to potentially load XSL files.
Adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.
Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.
"
        references = "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md"
        mitre = "attack.defense-evasion, attack.t1220"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        ($event.target.process.file.full_path = /\\wmic\.exe$/ nocase and
        $event.target.process.command_line = /-format/ nocase or
        $event.target.process.command_line = /\/format/ nocase or
        $event.target.process.command_line = /–format/ nocase or
        $event.target.process.command_line = /—format/ nocase or
        $event.target.process.command_line = /―format/ nocase and
        ($event.target.process.command_line != /Format:List/ nocase and
        $event.target.process.command_line != /Format:htable/ nocase and
        $event.target.process.command_line != /Format:hform/ nocase and
        $event.target.process.command_line != /Format:table/ nocase and
        $event.target.process.command_line != /Format:mof/ nocase and
        $event.target.process.command_line != /Format:value/ nocase and
        $event.target.process.command_line != /Format:rawxml/ nocase and
        $event.target.process.command_line != /Format:xml/ nocase and
        $event.target.process.command_line != /Format:csv/ nocase))
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wscript_cscript_script_exec.yaral ###
rule wsf/jse/js/vba/vbe_file_execution_via_cscript/wscript {
    meta:
        description = "Detects script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript"
        references = "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/, https://redcanary.com/blog/gootloader/"
        mitre = "attack.execution, attack.t1059.005, attack.t1059.007, detection.threat-hunting"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.names = /wscript.exe|cscript.exe/ nocase or
        $event.target.process.file.full_path = /\\wscript\.exe|\\cscript\.exe/ nocase) and
        $event.target.process.command_line = /\.js|\.jse|\.vba|\.vbe|\.vbs|\.wsf/ nocase)
    condition:
        $event
}

------------------------------------------------------------

### proc_creation_win_wuauclt_dll_loading.yaral ###
rule proxy_execution_via_wuauclt.exe {
    meta:
        description = "Detects the use of the Windows Update Client binary (wuauclt.exe) for proxy execution."
        references = "https://dtm.uk/wuauclt/, https://blog.malwarebytes.com/threat-intelligence/2022/01/north-koreas-lazarus-apt-leverages-windows-update-client-github-in-latest-campaign/"
        mitre = "attack.defense-evasion, attack.t1218, attack.execution"
        logsource = "process_creation"
        product = "windows"
    events:
        ($event.metadata.event_type = "PROCESS_LAUNCH") and
        (($event.target.process.file.full_path = /\\wuauclt\.exe$/ nocase or
        $event.target.process.file.names = "wuauclt.exe" nocase) and
        $event.target.process.command_line = /UpdateDeploymentProvider/ nocase and
        $event.target.process.command_line = /RunHandlerComServer/ nocase and
        ($event.target.process.command_line != / \/UpdateDeploymentProvider UpdateDeploymentProvider\.dll / nocase or
        $event.target.process.command_line != / wuaueng\.dll / nocase or
        ($event.target.process.command_line != /:\\Windows\\UUS\\Packages\\Preview\\amd64\\updatedeploy\.dll \/ClassId/ nocase and
        $event.target.process.command_line != /:\\Windows\\UUS\\amd64\\UpdateDeploy\.dll \/ClassId/ nocase) or
        ($event.target.process.command_line = /:\\Windows\\WinSxS\\/ nocase and
        $event.target.process.command_line = /\\UpdateDeploy\.dll \/ClassId / nocase)))
    condition:
        $event
}

------------------------------------------------------------

